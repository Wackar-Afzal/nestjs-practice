var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.223,1,2.274]],["body/controllers/AppController.html",[0,2.084,1,3.876,2,1.62,3,0.384,4,0.339,5,0.339,6,4.08,7,0.462,8,0.026,9,1.084,10,3.465,11,4.08,12,0.384,13,0.051,14,2.93,15,1.987,16,0.022,17,0.022]],["title/modules/AppModule.html",[18,1.144,19,2.274]],["body/modules/AppModule.html",[1,3.205,2,1.377,3,0.227,4,0.2,5,0.2,7,0.526,8,0.026,9,0.641,10,3.22,11,2.413,12,0.227,13,0.03,16,0.015,17,0.015,18,1.611,19,4.432,20,1.262,21,1.262,22,1.465,23,1.465,24,1.262,25,2.464,26,1.465,27,2.413,28,2.413,29,2.413,30,3.512,31,3.22,32,3.512,33,3.22,34,2.97,35,2.105,36,1.465,37,1.357,38,2.123,39,3.569,40,2.854,41,2.854,42,2.854,43,1.733,44,2.854,45,2.854,46,1.733,47,1.175,48,1.097,49,2.854,50,2.854,51,1.733,52,1.357,53,2.413,54,4.1,55,3.467,56,2.123,57,2.854,58,2.854,59,2.854,60,2.854,61,2.854,62,2.854,63,2.123,64,2.123,65,2.413,66,2.413,67,2.413,68,2.854,69,2.854,70,2.854,71,1.733,72,2.854,73,1.025,74,2.854,75,2.854,76,2.854,77,1.589,78,2.854,79,2.854,80,2.854,81,2.854,82,2.854,83,2.854,84,2.854,85,2.854,86,2.854,87,2.854,88,2.854]],["title/injectables/AppService.html",[10,1.896,89,1.144]],["body/injectables/AppService.html",[3,0.372,4,0.328,5,0.328,7,0.372,8,0.025,9,1.049,10,3.167,12,0.372,13,0.049,16,0.021,17,0.021,73,1.676,89,1.91,90,2.397,91,3.948,92,0.564,93,2.186,94,6.386,95,0.785,96,4.669,97,1.794,98,1.787,99,4.669,100,4.669]],["title/controllers/AuthController.html",[0,1.223,43,2.068]],["body/controllers/AuthController.html",[0,1.468,2,1.373,3,0.326,4,0.287,5,0.287,7,0.485,8,0.026,9,0.919,12,0.326,13,0.043,14,2.483,15,1.684,16,0.019,17,0.019,43,3.18,73,1.468,92,0.494,93,2.012,95,0.688,97,1.571,101,3.458,102,2.483,103,4.089,104,2.379,105,5.236,106,4.089,107,3.858,108,1.052,109,5.236,110,4.089,111,1.684,112,1.285,113,0.688,114,1.125,115,3.497,116,4.089,117,2.1,118,3.458,119,4.089,120,2.483,121,1.468,122,4.089,123,4.089,124,4.089,125,4.089,126,4.089,127,4.089]],["title/modules/AuthModule.html",[18,1.144,30,2.068]],["body/modules/AuthModule.html",[2,1.408,3,0.334,4,0.294,5,0.294,7,0.49,8,0.026,9,0.942,12,0.334,13,0.044,16,0.02,17,0.02,18,1.963,20,1.854,21,1.854,22,2.153,23,2.153,24,1.854,25,3.001,26,2.732,30,3.937,34,2.153,35,2.732,36,2.153,37,1.994,39,3.119,43,3.231,117,3.329,118,3.546,128,3.546,129,3.546,130,4.193,131,2.801,132,4.193,133,3.546,134,4.193]],["title/injectables/AuthService.html",[89,1.144,117,1.749]],["body/injectables/AuthService.html",[3,0.306,4,0.27,5,0.27,7,0.401,8,0.026,9,0.863,12,0.306,13,0.04,16,0.019,17,0.019,71,2.334,73,1.806,89,1.689,90,1.974,92,0.464,93,1.933,95,0.846,97,1.933,98,1.94,104,2.608,111,2.071,112,1.581,113,0.846,114,1.384,117,2.583,131,2.567,135,3.25,136,5.031,137,4.254,138,3.844,139,1.699,140,3.844,141,1.637,142,2.334,143,3.844,144,3.844,145,3.36,146,3.844,147,2.334,148,1.828,149,3.25,150,3.844,151,3.844,152,3.844,153,3.25,154,3.844,155,3.844]],["title/classes/CreateMetaOptionDto.html",[13,0.036,156,1.749]],["body/classes/CreateMetaOptionDto.html",[3,0.342,4,0.301,5,0.301,7,0.43,8,0.025,12,0.342,13,0.057,16,0.02,17,0.02,92,0.518,95,0.721,98,1.347,108,1.103,113,0.721,121,1.539,156,2.771,157,1.765,158,2.385,159,3.604,160,3.625,161,1.695,162,4.392,163,2.603,164,5.395,165,3.604,166,2.863,167,2.201,168,5.395,169,4.287,170,4.287,171,2.603,172,4.014,173,2.771,174,3.004,175,1.895,176,4.287,177,4.287,178,2.603,179,3.625]],["title/classes/CreatePostDto.html",[13,0.036,180,1.896]],["body/classes/CreatePostDto.html",[3,0.114,4,0.1,5,0.1,7,0.345,8,0.025,12,0.114,13,0.032,16,0.009,17,0.009,51,0.867,77,2.228,92,0.172,95,0.892,98,1.769,108,1.365,113,1.082,114,1.493,121,0.513,139,1.101,141,0.657,142,3.038,156,1.847,157,0.588,159,0.954,161,1.13,162,1.777,163,1.45,165,2.402,166,2.672,167,2.936,171,0.867,172,1.063,173,1.226,174,0.795,175,0.631,178,0.867,180,1.33,181,4.588,182,1.063,183,2.388,184,3.658,185,2.02,186,2.602,187,2.976,188,2.602,189,2.672,190,2.889,191,3.067,192,4.071,193,1.429,194,1.429,195,1.595,196,1.429,197,1.429,198,4.814,199,2.408,200,2.126,201,2.388,202,2.388,203,1.429,204,2.388,205,2.388,206,2.602,207,1.429,208,1.429,209,2.602,210,2.388,211,2.388,212,2.388,213,1.676,214,1.208,215,2.02,216,2.02,217,1.429,218,1.429,219,2.388,220,1.429,221,2.388,222,1.429,223,1.429,224,1.429,225,2.388,226,1.208,227,1.429,228,2.402,229,4.23,230,1.429,231,2.976,232,3.041,233,1.595,234,2.02,235,2.02,236,1.429,237,2.402,238,2.602,239,2.388,240,2.388,241,1.429,242,1.429,243,1.429,244,1.429,245,1.429,246,1.429,247,2.02,248,3.041,249,3.041,250,2.02,251,2.02,252,2.02,253,2.02,254,1.208,255,1.429,256,3.041,257,2.289,258,2.02,259,2.02,260,2.02,261,2.02,262,1.429,263,3.658,264,3.596,265,2.388,266,1.429,267,1.429,268,2.02,269,2.02,270,1.429,271,1.429,272,3.658,273,3.596,274,2.388,275,3.596,276,1.481,277,2.388,278,1.429,279,2.388,280,2.388,281,1.429,282,1.429,283,1.429,284,1.429,285,1.429,286,0.867,287,1.429,288,1.429,289,2.388,290,1.429,291,1.429,292,1.429,293,2.289,294,2.388,295,1.429,296,3.416,297,2.02,298,1.063,299,1.777,300,1.063,301,2.388,302,1.208,303,1.208,304,0.954,305,2.675,306,1.429,307,1.429,308,3.041,309,1.429,310,2.388,311,1.429,312,1.429,313,1.429,314,1.429,315,1.429,316,1.429,317,1.208,318,1.208,319,1.208,320,1.208,321,1.208,322,1.063,323,1.429,324,1.429,325,1.429,326,1.429,327,1.429,328,1.429,329,1.429,330,1.429,331,1.429,332,1.429,333,1.429,334,1.429,335,1.063,336,1.429,337,1.429,338,1.208,339,1.208,340,1.429,341,1.429,342,1.429,343,1.429,344,2.388,345,2.388,346,1.429,347,1.429,348,1.429]],["title/classes/CreateTagDto.html",[13,0.036,349,2.068]],["body/classes/CreateTagDto.html",[3,0.22,4,0.194,5,0.194,7,0.319,8,0.025,12,0.22,13,0.042,16,0.015,17,0.015,92,0.334,95,0.923,98,1.899,108,1.412,112,1.259,113,0.993,114,1.574,121,0.993,157,1.139,161,1.259,163,1.679,165,3.452,166,2.677,167,2.42,171,2.433,172,2.981,173,2.058,174,2.624,175,1.222,178,1.679,189,2.677,190,3.821,200,1.65,206,2.338,209,3.986,213,1.103,214,2.338,215,3.389,216,3.389,228,1.847,229,3.389,231,2.057,247,3.389,248,4.371,249,4.371,250,3.389,251,3.389,252,3.389,253,3.389,254,2.338,256,4.371,257,3.506,258,3.389,259,3.389,260,3.389,261,3.389,296,3.845,297,3.986,298,2.057,299,2.057,300,2.057,305,2.981,308,2.338,317,2.338,318,2.338,319,2.338,320,2.338,321,2.338,322,2.057,335,2.057,338,2.338,339,2.338,349,2.433,350,4.838,351,2.338,352,3.389,353,2.765,354,2.765,355,3.389,356,2.765,357,2.765,358,2.765,359,2.765,360,2.765,361,2.765,362,2.765,363,2.765,364,2.765,365,2.765,366,4.007,367,2.765,368,1.847,369,2.338,370,2.765,371,2.765,372,2.765,373,2.765,374,2.338]],["title/classes/CreateUserDtO.html",[13,0.036,375,1.896]],["body/classes/CreateUserDtO.html",[3,0.203,4,0.179,5,0.179,7,0.301,8,0.024,12,0.203,13,0.04,16,0.014,17,0.014,92,0.308,95,0.757,98,1.808,108,1.158,112,1.808,113,1.048,121,0.916,145,3.714,147,3.494,157,1.05,161,1.187,163,2.732,165,2.523,167,2.31,171,1.549,173,1.31,174,2.103,175,1.128,195,3.546,231,4.136,232,5.331,298,1.897,299,1.897,300,1.897,368,1.704,375,2.103,376,4.206,377,1.897,378,3.778,379,2.551,380,4.499,381,2.551,382,5.56,383,4.702,384,5.31,385,2.551,386,3.778,387,4.974,388,6.304,389,3.194,390,4.206,391,2.551,392,2.551,393,2.551,394,2.551,395,2.551,396,2.551,397,3.778,398,4.974,399,3.778,400,3.778,401,4.974,402,4.974,403,4.974,404,4.974,405,4.974,406,2.551,407,2.551,408,2.551,409,2.551,410,2.551,411,3.778,412,3.778,413,3.778,414,2.551,415,3.778,416,2.551,417,3.194,418,2.551,419,2.551,420,2.551,421,4.499,422,2.551,423,2.551,424,2.551,425,2.551,426,2.551,427,2.551,428,2.551,429,1.897,430,2.551,431,2.551,432,2.551,433,2.551,434,2.551,435,2.551,436,2.551,437,2.551,438,1.897]],["title/classes/GetPostParamDto.html",[13,0.036,439,2.274]],["body/classes/GetPostParamDto.html",[3,0.363,4,0.32,5,0.32,7,0.447,8,0.025,12,0.363,13,0.064,16,0.021,17,0.021,92,0.55,95,0.767,108,1.173,113,0.943,114,1.542,139,1.254,141,1.542,157,1.877,161,1.761,173,2.878,174,2.538,175,2.015,286,2.768,439,3.744,440,3.854,441,3.854,442,4.558,443,3.391,444,3.854]],["title/classes/GetUserParamsDto.html",[13,0.036,445,2.068]],["body/classes/GetUserParamsDto.html",[3,0.339,4,0.299,5,0.299,7,0.469,8,0.025,12,0.339,13,0.062,16,0.02,17,0.02,48,2.375,92,0.514,95,0.716,108,1.095,113,0.904,114,1.478,121,1.528,139,1.171,141,1.619,157,1.752,161,1.687,167,2.185,175,1.881,286,2.584,293,3.995,296,3.995,305,3.165,355,3.598,443,3.165,444,3.598,445,3.261,446,4.541,447,3.598,448,4.255,449,4.255,450,4.255,451,4.255,452,4.255]],["title/classes/LoginAuthDto.html",[13,0.036,107,2.274]],["body/classes/LoginAuthDto.html",[3,0.33,4,0.291,5,0.291,7,0.421,8,0.026,12,0.33,13,0.061,16,0.02,17,0.02,92,0.501,95,0.978,98,1.66,107,3.529,108,1.497,113,1.03,139,1.141,141,1.454,145,3.529,147,3.209,157,1.708,161,1.66,173,3.144,174,2.942,175,1.833,286,2.519,417,4.468,429,3.086,438,3.086,441,3.507,443,3.086,453,3.507,454,4.148,455,4.148,456,4.148,457,4.148,458,4.148,459,2.13]],["title/entities/MetaOption.html",[460,1.402,461,1.402]],["body/entities/MetaOption.html",[3,0.282,4,0.248,5,0.248,7,0.379,8,0.026,12,0.282,13,0.037,16,0.018,17,0.018,52,2.943,92,0.427,95,1.011,98,1.111,108,1.546,113,1.011,139,0.973,141,1.31,158,2.735,161,1.496,162,3.541,166,2.362,179,2.991,199,1.969,213,1.653,237,3.18,459,1.816,460,1.96,461,1.96,462,2.148,463,2.991,464,4.76,465,4.025,466,4.55,467,3.537,468,3.594,469,3.537,470,2.362,471,2.362,472,3.537,473,2.991,474,3.537,475,2.991,476,3.537,477,3.537,478,4.55,479,3.537,480,2.631,481,3.18,482,4.025,483,2.991,484,1.563,485,3.537,486,2.631,487,3.537,488,2.991,489,3.537,490,3.537]],["title/injectables/MetaOptionService.html",[89,1.144,491,1.896]],["body/injectables/MetaOptionService.html",[3,0.296,4,0.261,5,0.261,7,0.487,8,0.026,9,0.836,12,0.296,13,0.039,15,1.532,16,0.018,17,0.018,47,1.532,51,2.99,71,2.259,73,1.336,89,1.653,90,1.91,92,0.449,93,1.892,95,0.828,97,1.429,104,2.272,111,2.027,112,1.547,113,0.828,114,1.355,156,3.016,158,2.439,304,2.484,461,1.532,484,1.644,491,2.741,492,3.145,493,3.686,494,2.528,495,2.99,496,3.72,497,3.351,498,3.72,499,3.145,500,3.72,501,3.72,502,2.484,503,1.769,504,2.259,505,2.484,506,2.767,507,3.145,508,3.145,509,2.259,510,3.145,511,3.72,512,3.72,513,3.72,514,2.767,515,3.72]],["title/controllers/MetaOptionsController.html",[0,1.223,516,2.274]],["body/controllers/MetaOptionsController.html",[0,1.314,2,1.229,3,0.292,4,0.257,5,0.257,7,0.465,8,0.025,9,0.822,12,0.292,13,0.038,14,2.223,15,1.507,16,0.018,17,0.018,51,3.324,52,2.317,73,1.314,92,0.442,93,1.872,95,0.616,97,1.407,102,2.223,104,2.254,108,0.942,111,1.507,112,1.15,113,0.616,114,1.007,120,2.223,121,1.314,156,2.997,158,2.153,200,1.507,213,1.506,304,2.445,461,2.006,491,2.038,503,1.741,506,4.072,516,3.253,517,3.095,518,4.871,519,4.871,520,3.661,521,2.723,522,2.445,523,2.501,524,4.119,525,2.723,526,4.072,527,3.623,528,2.723,529,3.661,530,2.445,531,2.445,532,2.445,533,3.095,534,3.661,535,3.661,536,3.661,537,2.445,538,2.723,539,2.445,540,3.661,541,3.661,542,3.661]],["title/modules/MetaOptionsModule.html",[18,1.144,31,1.896]],["body/modules/MetaOptionsModule.html",[2,1.758,3,0.326,4,0.287,5,0.287,7,0.502,8,0.026,9,0.919,12,0.326,13,0.043,16,0.019,17,0.019,18,1.94,20,1.807,21,1.807,22,2.1,23,2.1,24,1.807,25,2.689,26,2.1,31,3.586,35,2.689,36,2.1,37,1.945,46,2.483,47,1.684,51,3.18,52,1.945,158,1.807,461,1.684,491,3.505,504,2.483,516,3.858,533,3.458,543,3.458,544,3.458,545,4.089,546,4.089,547,4.089,548,4.089]],["title/classes/PatchPostDto.html",[13,0.036,549,2.068]],["body/classes/PatchPostDto.html",[3,0.338,4,0.298,5,0.298,7,0.468,8,0.025,12,0.338,13,0.056,16,0.02,17,0.02,92,0.512,95,0.713,108,1.091,113,0.713,121,1.522,139,1.166,141,1.698,157,1.746,161,1.683,163,2.574,171,2.574,173,2.751,175,1.874,180,2.36,182,3.154,213,1.474,293,3.986,459,2.177,494,2.177,549,3.254,550,4.531,551,4.531,552,5.358,553,4.531,554,4.239,555,4.239,556,3.585,557,3.154,558,4.239,559,3.585]],["title/entities/Post.html",[213,0.937,460,1.402]],["body/entities/Post.html",[3,0.165,4,0.145,5,0.145,7,0.426,8,0.026,12,0.165,13,0.022,16,0.012,17,0.012,48,1.519,52,0.983,77,3.393,92,0.249,95,1.012,98,1.826,108,1.548,113,1.087,114,1.655,139,0.886,141,1.088,142,3.249,156,1.061,158,1.423,159,1.38,161,1.011,184,3.343,185,3.343,186,2.722,187,3.98,188,3.343,189,2.641,190,2.641,191,2.641,192,3.343,199,3.081,213,0.886,226,4.333,237,2.15,276,2.11,302,1.747,303,1.747,304,1.38,460,1.325,461,1.628,462,1.255,468,2.641,470,3.696,471,4.199,473,1.747,481,3.797,482,1.747,483,1.747,484,0.913,504,1.255,560,1.747,561,2.394,562,2.066,563,2.066,564,3.774,565,2.066,566,3.774,567,2.066,568,3.811,569,3.598,570,1.747,571,2.066,572,2.066,573,2.066,574,1.537,575,2.066,576,2.722,577,3.219,578,2.066,579,3.219,580,2.066,581,2.066,582,4.463,583,1.38,584,2.066,585,2.066,586,1.747,587,3.219,588,2.066,589,2.066,590,2.066,591,3.219,592,2.722,593,1.747,594,1.747,595,1.747,596,2.066,597,2.066,598,1.537,599,2.066,600,2.066,601,1.747,602,2.066,603,2.066,604,2.066,605,2.066,606,2.066,607,2.066]],["title/controllers/PostController.html",[0,1.223,608,2.274]],["body/controllers/PostController.html",[0,0.818,2,0.765,3,0.182,4,0.16,5,0.16,7,0.425,8,0.026,9,0.512,12,0.182,13,0.024,15,0.938,16,0.013,17,0.013,48,2.129,73,1.688,77,1.932,92,0.275,93,1.334,95,0.791,97,2.048,98,1.477,102,1.384,104,2.534,108,1.21,111,1.935,112,1.589,113,0.897,114,1.293,115,1.522,120,1.384,121,0.818,139,0.955,141,1.293,142,2.107,180,2.617,195,2.318,200,2.409,213,1.693,272,2.935,439,1.522,459,1.17,461,0.938,495,1.384,503,1.084,509,1.384,521,3.496,522,1.522,523,1.782,525,2.582,526,3.127,527,3.964,528,1.695,531,2.318,532,2.808,537,1.522,538,1.695,539,1.522,549,3.236,557,2.582,559,1.927,608,2.318,609,1.927,610,3.471,611,3.471,612,3.471,613,3.471,614,2.279,615,2.279,616,2.279,617,2.808,618,2.935,619,2.279,620,4.829,621,1.927,622,2.279,623,2.279,624,3.471,625,4.122,626,2.279,627,3.974,628,2.935,629,2.279,630,3.471,631,2.279,632,3.471,633,2.279,634,2.279,635,2.279,636,1.927,637,2.279,638,2.279,639,2.279,640,2.935,641,1.927,642,2.935,643,1.269,644,1.927,645,2.279,646,3.471,647,1.927,648,2.279,649,2.279,650,1.695,651,1.695,652,2.279,653,2.279,654,2.279,655,2.279,656,2.279,657,2.279,658,2.279,659,2.279,660,2.279,661,2.279,662,3.471,663,2.279,664,2.279,665,2.279,666,1.927,667,2.279,668,2.279]],["title/modules/PostModule.html",[18,1.144,32,2.068]],["body/modules/PostModule.html",[2,1.566,3,0.273,4,0.241,5,0.241,7,0.526,8,0.026,9,0.771,12,0.273,13,0.036,16,0.017,17,0.017,18,1.779,20,1.517,21,1.517,22,1.762,23,1.762,24,1.517,25,2.395,26,1.762,31,3.414,32,4.042,33,3.31,34,3.053,35,2.395,36,1.762,37,1.632,39,2.553,46,2.084,47,1.413,48,1.319,52,2.219,53,2.902,133,2.902,158,2.062,213,0.944,276,1.413,461,1.413,504,2.084,594,2.902,595,2.902,608,3.539,643,3.31,644,2.902,669,2.902,670,3.432,671,2.902,672,3.432,673,3.432,674,2.902,675,3.432,676,3.432,677,3.432]],["title/injectables/PostService.html",[89,1.144,643,1.896]],["body/injectables/PostService.html",[3,0.172,4,0.151,5,0.151,7,0.459,8,0.026,9,0.484,12,0.172,13,0.023,15,1.88,16,0.012,17,0.012,47,0.887,52,1.025,63,3.02,73,1.639,89,1.117,90,1.107,92,0.26,93,1.278,95,0.83,97,1.896,98,1.045,104,2.501,111,2.031,112,1.55,113,0.83,114,1.357,115,1.439,139,0.915,141,0.593,148,2.171,149,1.822,158,0.953,180,2.746,213,1.434,276,0.887,460,0.887,461,0.887,484,0.953,493,4.057,494,1.708,495,2.019,497,3.299,499,2.812,502,3.049,503,1.025,504,1.309,505,1.439,506,1.603,508,1.822,509,2.772,510,1.822,514,4.041,523,1.708,530,1.439,549,2.772,557,2.474,564,1.822,574,1.603,617,2.221,627,1.822,636,2.812,643,1.851,647,1.822,650,3.02,651,1.603,674,1.822,678,1.822,679,3.325,680,2.155,681,3.325,682,4.06,683,2.344,684,2.155,685,2.155,686,2.155,687,3.325,688,1.603,689,2.155,690,2.155,691,2.155,692,2.155,693,2.155,694,2.155,695,1.822,696,2.155,697,2.155,698,2.155,699,2.155,700,2.155,701,2.155,702,2.155,703,1.603,704,2.155,705,3.325,706,2.155,707,1.822,708,2.155,709,3.325,710,2.155,711,2.155,712,2.155,713,3.325,714,2.155,715,2.155,716,2.155,717,2.812,718,2.155,719,3.325,720,2.155,721,2.155,722,2.155,723,1.822,724,2.155,725,2.155,726,2.155,727,2.155,728,2.155,729,2.155,730,2.155,731,2.155,732,2.155,733,2.155,734,2.155,735,2.155,736,2.155,737,2.155,738,2.155,739,2.155,740,2.155,741,2.155,742,2.155,743,2.155,744,2.155]],["title/entities/Tag.html",[276,1.402,460,1.402]],["body/entities/Tag.html",[3,0.215,4,0.19,5,0.19,7,0.314,8,0.026,12,0.215,13,0.028,16,0.015,17,0.015,77,3.026,92,0.326,95,1.047,98,1.708,108,1.602,112,1.238,113,1.047,114,1.561,139,0.743,141,1.084,161,1.238,189,2.631,190,2.631,199,2.193,200,1.622,213,1.561,237,3.106,276,1.622,322,2.009,335,2.009,352,3.331,368,1.803,369,2.283,374,2.283,459,1.387,460,1.622,462,1.64,465,3.331,466,3.932,468,3.106,470,3.63,471,3.63,475,3.331,478,3.932,480,2.009,481,3.79,484,1.194,486,2.93,488,2.283,566,3.331,568,3.459,569,3.459,570,2.283,574,2.93,583,2.631,586,2.283,592,3.331,593,2.283,598,2.93,601,2.283,625,3.459,745,2.283,746,3.939,747,3.939,748,2.7,749,4.65,750,2.7,751,2.7,752,2.7,753,2.7,754,3.939,755,2.7,756,3.939,757,2.7,758,2.7,759,2.7,760,2.7,761,3.932,762,3.939,763,3.939,764,4.65,765,2.7,766,2.7]],["title/injectables/TagService.html",[89,1.144,683,1.749]],["body/injectables/TagService.html",[3,0.233,4,0.205,5,0.205,7,0.447,8,0.026,9,0.656,12,0.233,13,0.031,15,1.202,16,0.018,17,0.015,47,1.202,71,1.773,73,1.903,89,1.399,90,1.499,92,0.352,93,1.601,95,0.943,97,2.036,104,2.665,111,2.308,112,1.761,113,0.943,114,1.542,139,1.603,141,1.458,191,1.95,276,1.716,349,3.218,484,1.29,493,4.323,494,2.14,495,2.53,497,2.951,502,3.54,503,1.388,505,1.95,507,2.468,509,1.773,514,3.615,617,2.783,683,2.14,688,2.171,723,2.468,767,2.468,768,4.167,769,3.523,770,2.919,771,2.919,772,2.919,773,2.919,774,2.919,775,2.919,776,2.919,777,2.919,778,2.468,779,2.919,780,2.468,781,2.468,782,2.919,783,2.919,784,2.919,785,2.919,786,2.919,787,2.919,788,2.919,789,2.919,790,2.919,791,2.919,792,2.919,793,2.919,794,2.919,795,2.919]],["title/controllers/TagsController.html",[0,1.223,796,2.274]],["body/controllers/TagsController.html",[0,1.007,2,0.942,3,0.224,4,0.197,5,0.197,7,0.415,8,0.025,9,0.63,12,0.224,13,0.029,14,1.704,15,1.155,16,0.015,17,0.015,73,1.706,92,0.339,93,1.556,95,0.8,97,1.826,102,1.704,104,2.546,108,1.223,111,1.957,112,1.493,113,0.8,114,1.308,120,1.704,121,1.007,139,1.432,141,1.114,191,3.959,200,1.957,213,1.631,276,2.368,349,2.886,503,1.334,521,3.535,522,1.874,523,2.079,524,3.424,525,2.087,526,4.599,527,4.277,528,2.087,530,1.874,531,1.874,532,1.874,537,1.874,538,3.535,539,1.874,617,3.84,621,2.372,641,2.372,642,2.372,666,3.424,683,1.441,688,2.087,717,4.4,769,3.424,778,2.372,781,2.372,796,2.705,797,2.372,798,4.752,799,2.805,800,2.805,801,4.752,802,5.204,803,4.05,804,2.805,805,4.752,806,2.805,807,2.805,808,2.372,809,2.805,810,2.805,811,2.805,812,2.805,813,2.805,814,2.805,815,2.805,816,2.805,817,2.805,818,2.805,819,2.805,820,2.805,821,2.805]],["title/modules/TagsModule.html",[18,1.144,33,1.896]],["body/modules/TagsModule.html",[2,1.735,3,0.319,4,0.281,5,0.281,7,0.498,8,0.026,9,0.899,12,0.319,13,0.042,16,0.019,17,0.019,18,1.92,20,1.77,21,1.77,22,2.056,23,2.056,24,1.77,25,2.653,26,2.653,33,3.628,35,2.653,36,2.056,37,1.904,46,2.431,47,1.649,276,1.649,683,3.455,780,3.386,796,3.82,808,3.386,822,3.386,823,3.386,824,3.386,825,4.004,826,4.004,827,4.004,828,4.004,829,4.004]],["title/classes/UpdateUserDto.html",[13,0.036,830,2.274]],["body/classes/UpdateUserDto.html",[3,0.386,4,0.34,5,0.34,7,0.464,8,0.025,12,0.386,13,0.051,16,0.022,17,0.022,157,1.995,375,2.698,377,3.604,494,2.488,551,4.919,556,4.097,830,3.886,831,4.097,832,5.818,833,4.097,834,4.097,835,3.604]],["title/entities/User.html",[48,1.309,460,1.402]],["body/entities/User.html",[3,0.277,4,0.244,5,0.244,7,0.375,8,0.026,12,0.277,13,0.036,16,0.017,17,0.017,48,1.807,77,1.934,92,0.419,95,1.004,98,1.675,108,1.536,112,1.477,113,1.004,139,0.956,141,1.294,145,3.141,147,2.855,161,1.477,199,2.968,213,1.467,368,2.32,383,3.976,390,2.937,429,2.584,438,2.584,459,1.783,460,1.936,462,2.109,468,3.561,470,3.561,471,3.561,480,2.584,481,3.816,484,1.535,486,3.966,568,3.966,569,3.966,583,2.32,598,2.584,625,3.498,761,4.508,836,2.937,837,3.473,838,3.473,839,3.473,840,3.473,841,3.473,842,3.473,843,3.473,844,3.473,845,3.473,846,4.702,847,3.473,848,3.473]],["title/injectables/UserService.html",[89,1.144,148,1.62]],["body/injectables/UserService.html",[3,0.152,4,0.134,5,0.134,7,0.442,8,0.026,9,0.43,12,0.152,13,0.02,15,0.787,16,0.011,17,0.011,47,0.787,48,2.267,55,3.942,56,1.422,63,1.422,71,1.161,73,1.35,89,1.017,90,0.982,92,0.231,93,1.164,95,0.72,97,1.644,104,2.284,111,2.042,112,1.344,113,0.72,114,1.177,115,3.312,117,0.982,131,1.277,137,1.617,139,1.564,141,1.035,147,2.597,148,1.44,200,1.247,228,2.511,233,3.113,375,2.595,389,2.561,445,2.831,484,0.845,493,3.312,494,1.555,495,1.839,497,2.597,502,2.023,503,0.909,505,1.277,509,1.839,523,2.668,583,2.023,618,2.561,628,2.561,650,2.253,651,2.797,703,2.797,707,1.617,835,1.422,849,1.617,850,3.028,851,3.028,852,4.805,853,3.028,854,3.028,855,3.028,856,1.912,857,1.912,858,3.76,859,1.912,860,1.912,861,1.912,862,1.912,863,3.617,864,3.028,865,1.912,866,3.18,867,1.912,868,2.561,869,3.028,870,3.028,871,1.912,872,3.028,873,1.617,874,1.617,875,1.912,876,1.617,877,1.912,878,1.617,879,1.912,880,1.912,881,1.912,882,1.912,883,1.912,884,1.912,885,4.959,886,1.912,887,1.912,888,1.912,889,3.76,890,4.661,891,1.912,892,3.76,893,3.617,894,3.76,895,3.76,896,3.76,897,3.76,898,3.76,899,3.76,900,1.912,901,3.76,902,3.028,903,4.277,904,3.028,905,1.912,906,1.912,907,3.028,908,1.912,909,1.912,910,1.912,911,3.028,912,1.912,913,1.912,914,1.912,915,1.912,916,1.912,917,1.912,918,1.912,919,1.912,920,1.912,921,1.912,922,1.912,923,1.912,924,1.912,925,1.912]],["title/controllers/UsersController.html",[0,1.223,926,2.274]],["body/controllers/UsersController.html",[2,0.81,3,0.192,4,0.169,5,0.169,7,0.434,8,0.025,9,0.542,12,0.192,13,0.025,14,1.465,15,0.993,16,0.013,17,0.013,48,2.363,73,2.087,92,0.291,93,1.392,95,0.814,97,1.859,98,0.758,102,1.465,104,2.566,108,1.245,111,1.992,112,1.52,113,0.916,114,1.331,120,1.465,121,0.866,139,1.666,141,1.331,148,1.147,153,4.385,167,1.86,195,2.42,199,2.017,200,2.135,213,0.664,233,2.906,375,2.693,445,2.938,459,1.239,494,1.239,503,1.147,522,1.611,523,1.86,530,1.611,531,1.611,532,1.611,537,1.611,539,2.42,620,3.68,640,3.68,695,2.04,830,3.231,835,2.695,852,2.04,866,3.68,868,3.064,873,2.04,874,2.04,893,2.04,926,2.42,927,2.04,928,3.623,929,3.623,930,3.623,931,3.623,932,2.412,933,2.412,934,2.412,935,2.412,936,2.412,937,2.412,938,4.838,939,2.412,940,4.838,941,2.412,942,2.412,943,2.412,944,2.412,945,2.412,946,2.412,947,3.623,948,2.412,949,2.412,950,3.623,951,4.838,952,2.412,953,2.412,954,2.412,955,2.412,956,2.412,957,2.412,958,2.04,959,2.412,960,2.412,961,2.412,962,2.412,963,3.623,964,4.352,965,2.412,966,2.412,967,2.412,968,2.412,969,2.412,970,2.412,971,2.412,972,2.412,973,2.412,974,2.412,975,2.412,976,2.412,977,2.412,978,2.412,979,2.412,980,2.412,981,2.412,982,2.412,983,2.412]],["title/modules/UsersModule.html",[18,1.144,34,1.749]],["body/modules/UsersModule.html",[2,1.731,3,0.318,4,0.28,5,0.28,7,0.498,8,0.026,9,0.896,12,0.318,13,0.042,16,0.019,17,0.019,18,1.917,20,1.764,21,1.764,22,2.049,23,2.049,24,1.764,25,2.647,26,2.647,34,3.343,35,2.647,36,2.049,37,1.898,46,2.423,47,1.643,48,1.533,131,2.665,148,3.198,876,3.374,926,3.813,958,3.374,984,3.374,985,3.374,986,3.374,987,3.99,988,3.99,989,3.99,990,3.99,991,3.99]],["title/coverage.html",[992,3.451]],["body/coverage.html",[0,2.089,1,1.94,5,0.204,6,2.456,8,0.026,10,1.617,13,0.065,16,0.015,17,0.015,24,1.284,38,2.16,43,1.764,48,1.595,52,1.975,64,2.16,89,1.954,91,2.456,101,2.456,107,1.94,113,0.489,117,1.491,135,2.456,148,1.381,156,1.491,158,2.337,159,1.94,160,2.456,180,1.617,181,2.456,182,3.088,213,0.799,276,1.196,349,1.764,350,2.456,351,2.456,375,1.617,376,2.456,377,3.088,439,1.94,440,2.456,445,1.764,446,2.456,447,2.456,453,2.456,460,2.177,461,1.196,463,2.456,491,1.617,492,2.456,516,1.94,517,2.456,523,1.491,549,1.764,550,2.456,560,2.456,608,1.94,609,2.456,643,1.617,678,2.456,683,1.491,745,2.456,767,2.456,796,1.94,797,2.456,830,1.94,831,2.456,836,2.456,849,2.456,926,1.94,927,2.456,992,2.16,993,2.456,994,2.904,995,2.904,996,6.864,997,6.125,998,2.904,999,5.989,1000,4.846,1001,4.152,1002,2.456,1003,2.904,1004,2.904,1005,4.152,1006,2.904,1007,2.904,1008,4.152,1009,2.904,1010,2.904,1011,2.904,1012,2.904]],["title/dependencies.html",[21,1.809,1013,2.408]],["body/dependencies.html",[8,0.026,9,0.985,13,0.057,16,0.02,17,0.02,21,1.938,47,1.805,56,3.262,121,1.574,175,1.938,286,2.662,484,1.938,833,3.708,834,3.708,878,3.708,1014,4.385,1015,4.385,1016,5.966,1017,4.385,1018,4.385,1019,4.385,1020,4.385,1021,4.385,1022,4.385,1023,4.385,1024,4.385,1025,4.385,1026,4.385,1027,4.385,1028,4.385,1029,4.385,1030,4.385,1031,4.385,1032,4.385,1033,4.385,1034,4.385]],["title/miscellaneous/enumerations.html",[1035,1.585,1036,3.461]],["body/miscellaneous/enumerations.html",[8,0.025,16,0.021,17,0.021,92,0.546,142,3.387,178,4.107,187,4.149,213,1.535,233,3.726,234,4.717,235,4.717,238,4.717,263,4.717,268,4.717,269,4.717,1035,2.518,1036,3.824,1037,4.522,1038,4.522,1039,4.522,1040,4.522]],["title/miscellaneous/functions.html",[1035,1.585,1041,3.461]],["body/miscellaneous/functions.html",[8,0.023,16,0.023,17,0.023,24,2.848,92,0.633,1002,4.432,1035,2.918,1041,4.432,1042,5.242]],["title/index.html",[92,0.344,863,2.408,1043,2.848]],["body/index.html",[4,0.214,8,0.025,16,0.016,17,0.016,37,2.568,167,2.553,200,1.253,228,2.866,497,1.847,553,2.572,561,2.263,703,2.263,992,2.263,993,2.572,1044,3.042,1045,3.042,1046,4.971,1047,3.042,1048,3.042,1049,3.042,1050,3.042,1051,3.042,1052,3.042,1053,4.971,1054,3.042,1055,3.042,1056,5.399,1057,3.042,1058,6.07,1059,3.042,1060,6.07,1061,3.042,1062,3.042,1063,3.042,1064,4.291,1065,3.042,1066,3.042,1067,3.042,1068,4.971,1069,3.042,1070,4.291,1071,3.042,1072,3.042,1073,3.042,1074,5.399,1075,3.042,1076,3.042,1077,3.042,1078,3.042,1079,3.042,1080,5.399,1081,4.291,1082,3.042,1083,4.971,1084,3.042,1085,4.565,1086,3.042,1087,3.042,1088,3.042,1089,3.042,1090,3.042,1091,3.042,1092,4.971,1093,3.042,1094,3.042,1095,3.042,1096,4.291,1097,3.042,1098,3.042,1099,3.042,1100,4.971,1101,3.042,1102,3.042,1103,3.042,1104,3.042,1105,3.042,1106,4.291,1107,3.042,1108,3.042,1109,3.042,1110,3.042,1111,3.042,1112,3.042,1113,4.291,1114,3.042,1115,3.042,1116,3.042,1117,4.291,1118,4.291,1119,3.042,1120,3.042,1121,3.042,1122,3.042,1123,3.042,1124,3.042,1125,3.042,1126,3.042,1127,3.042,1128,3.042,1129,3.042,1130,3.042,1131,3.042,1132,3.042,1133,3.042,1134,3.042,1135,3.042,1136,2.572]],["title/modules.html",[20,2.051]],["body/modules.html",[8,0.021,16,0.021,17,0.021,19,3.17,20,2.098,30,2.882,31,2.642,32,2.882,33,2.642,34,2.437,1085,5.651,1137,6.683,1138,6.683,1139,6.683]],["title/overview.html",[1140,3.923]],["body/overview.html",[2,1.135,8,0.025,10,2.927,16,0.017,17,0.017,18,1.135,19,4.491,20,1.495,21,1.495,22,1.736,23,1.736,24,1.495,25,1.736,26,1.736,27,2.859,28,2.859,29,2.859,30,3.592,31,3.399,32,4,33,3.479,34,3.209,35,2.371,36,1.736,37,1.608,90,1.736,117,2.7,128,2.859,129,2.859,148,2.972,157,1.392,257,2.515,462,2.053,491,2.927,543,2.859,544,2.859,643,2.927,669,2.859,671,2.859,683,3.209,822,2.859,823,2.859,824,2.859,984,2.859,985,2.859,986,2.859,1140,2.859,1141,5.258,1142,3.381]],["title/properties.html",[161,1.286,1013,2.408]],["body/properties.html",[8,0.025,16,0.022,17,0.022,161,1.625,200,2.129,561,3.847,1136,4.373,1143,5.171,1144,5.171,1145,5.171]],["title/miscellaneous/variables.html",[1035,1.585,1146,3.461]],["body/miscellaneous/variables.html",[8,0.024,16,0.022,17,0.022,38,3.796,64,4.463,65,4.315,66,4.315,67,4.315,92,0.616,178,3.099,576,4.315,1035,2.841,1146,4.315,1147,5.103]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1144,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1024,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":1004,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":999,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1005,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1008,"title":{},"body":{"coverage.html":{}}}],["09",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":344,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1.1.25",{"_index":1015,"title":{},"body":{"dependencies.html":{}}}],["1/6",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":1016,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":570,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["12",{"_index":946,"title":{},"body":{"controllers/UsersController.html":{}}}],["123",{"_index":949,"title":{},"body":{"controllers/UsersController.html":{}}}],["12345})@isoptional()@isint()@type(undefined",{"_index":448,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["16",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["17.13.3",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["1})@isnotempty()@isint",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":345,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2.0.5",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":620,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":526,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["2024",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["256",{"_index":754,"title":{},"body":{"entities/Tag.html":{}}}],["3",{"_index":387,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["3.2.3",{"_index":1017,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":390,"title":{},"body":{"classes/CreateUserDtO.html":{},"entities/User.html":{}}}],["30t12:30:00z",{"_index":343,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["30t12:30:00z'})@isiso8601()@isoptional",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":1142,"title":{},"body":{"overview.html":{}}}],["4/5",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["404",{"_index":632,"title":{},"body":{"controllers/PostController.html":{}}}],["512",{"_index":582,"title":{},"body":{"entities/Post.html":{}}}],["6",{"_index":1141,"title":{},"body":{"overview.html":{}}}],["6kpkvst33dchq&s",{"_index":338,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["6kpkvst33dchq&s'})@isoptional()@isurl()@maxlength(1024",{"_index":356,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["6kpkvst33dchq&s'})@isurl()@isoptional()@maxlength(1024",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["7.4.0",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":398,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["8.13.0",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["80",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"overview.html":{}}}],["96",{"_index":383,"title":{},"body":{"classes/CreateUserDtO.html":{},"entities/User.html":{}}}],["9]+)*$/,{message:'slug",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["address",{"_index":378,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["advanced",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["again",{"_index":894,"title":{},"body":{"injectables/UserService.html":{}}}],["already",{"_index":902,"title":{},"body":{"injectables/UserService.html":{}}}],["also'})@apiresponse({status",{"_index":803,"title":{},"body":{"controllers/TagsController.html":{}}}],["amazing",{"_index":1123,"title":{},"body":{"index.html":{}}}],["api",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":531,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":521,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["apioperation({summary:\"creates",{"_index":537,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary:\"delete",{"_index":665,"title":{},"body":{"controllers/PostController.html":{}}}],["apioperation({summary:\"deletes",{"_index":815,"title":{},"body":{"controllers/TagsController.html":{}}}],["apioperation({summary:\"fetches",{"_index":963,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation({summary:\"soft",{"_index":818,"title":{},"body":{"controllers/TagsController.html":{}}}],["apioperation({summary:\"update",{"_index":661,"title":{},"body":{"controllers/PostController.html":{}}}],["apiparam",{"_index":646,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":171,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isnotempty()@isstring()@maxlength(256)@minlength(3",{"_index":358,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apiproperty({description",{"_index":163,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description:\"email",{"_index":425,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["apiproperty({description:\"metavalue",{"_index":176,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["apiproperty({description:\"name",{"_index":418,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["apiproperty({description:\"password",{"_index":430,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["apiproperty({description:\"string",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["apiproperty({description:\"the",{"_index":558,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({description:\"title",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum:posttype,description:\"post",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum:status,description:\"provide",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({required",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({type:\"ineger\",required:true,example:1",{"_index":347,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional()@isstring()@isoptional",{"_index":353,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description",{"_index":355,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({description:\"get",{"_index":451,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({description:\"should",{"_index":372,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({description:\"sschema",{"_index":370,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["apipropertyoptional({required",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({type",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":959,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiquery({name:\"limit\",type:\"number\",required:false,example:12,description:\"number",{"_index":965,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiquery({name:\"page\",type:\"number\",required:false,example:123,description:\"number",{"_index":966,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":532,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status",{"_index":934,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse({status:200,description:\"user",{"_index":964,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse({status:200,description:\"you",{"_index":662,"title":{},"body":{"controllers/PostController.html":{}}}],["apiresponse({status:201,description:\"you",{"_index":538,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["apitags",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["apitags(\"post",{"_index":649,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('auth",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('meta",{"_index":535,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["apitags('tags",{"_index":810,"title":{},"body":{"controllers/TagsController.html":{}}}],["apitags('users",{"_index":961,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appconfig",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":1096,"title":{},"body":{"index.html":{}}}],["applications",{"_index":1052,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{}}}],["arrayminsize",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["arraynotempty",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["associated",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":493,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["atleast",{"_index":401,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["auth",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":132,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.controller",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":43,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":561,"title":{},"body":{"entities/Post.html":{},"index.html":{},"properties.html":{}}}],["author:true",{"_index":721,"title":{},"body":{"injectables/PostService.html":{}}}],["author:user",{"_index":607,"title":{},"body":{"entities/Post.html":{}}}],["authorid",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authorid:number",{"_index":348,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["authservice",{"_index":117,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice:authservice",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["autoloadentities:configservice.get('database.autoloadentities",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":514,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{}}}],["backers",{"_index":1124,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":871,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('the",{"_index":925,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception(['this",{"_index":906,"title":{},"body":{"injectables/UserService.html":{}}}],["base",{"_index":938,"title":{},"body":{"controllers/UsersController.html":{}}}],["below",{"_index":701,"title":{},"body":{"injectables/PostService.html":{}}}],["board",{"_index":1116,"title":{},"body":{"index.html":{}}}],["body",{"_index":530,"title":{},"body":{"controllers/MetaOptionsController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":143,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1139,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1137,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1047,"title":{},"body":{"index.html":{}}}],["cascade",{"_index":574,"title":{},"body":{"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{}}}],["cascade'})@joincolumn",{"_index":476,"title":{},"body":{"entities/MetaOption.html":{}}}],["casse",{"_index":403,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["catch(err",{"_index":889,"title":{},"body":{"injectables/UserService.html":{}}}],["channel",{"_index":1087,"title":{},"body":{"index.html":{}}}],["character",{"_index":388,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["characters",{"_index":384,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["characters'})@matches(/^(?=.*[a",{"_index":410,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["check",{"_index":1074,"title":{},"body":{"index.html":{}}}],["chracter",{"_index":434,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["chracter'})@maxlength(96",{"_index":409,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["class",{"_index":13,"title":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":157,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":128,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":129,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule",{"_index":543,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_metaoptionsmodule_providers",{"_index":544,"title":{},"body":{"modules/MetaOptionsModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":669,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":670,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":671,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_tagsmodule",{"_index":822,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_exports",{"_index":823,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_tagsmodule_providers",{"_index":824,"title":{},"body":{"modules/TagsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":984,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":985,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":986,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":702,"title":{},"body":{"injectables/PostService.html":{}}}],["column",{"_index":481,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":470,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":1077,"title":{},"body":{"index.html":{}}}],["commented",{"_index":700,"title":{},"body":{"injectables/PostService.html":{}}}],["compodoc/compodoc",{"_index":1014,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":881,"title":{},"body":{"injectables/UserService.html":{}}}],["config/app.config",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["config/database.config",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["config/envronment.validation",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot({isglobal:true",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{}}}],["configservice.get('database.port",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice:configservice",{"_index":882,"title":{},"body":{"injectables/UserService.html":{}}}],["console",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(email,password,id",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(environment,\"environment",{"_index":915,"title":{},"body":{"injectables/UserService.html":{}}}],["console.log(updateuserdto,\"body",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":495,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["constructor(metaoptionrepository",{"_index":496,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["constructor(tagrepository",{"_index":770,"title":{},"body":{"injectables/TagService.html":{}}}],["constructor(userrepository",{"_index":856,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":680,"title":{},"body":{"injectables/PostService.html":{}}}],["contain",{"_index":415,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["contains",{"_index":400,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["content",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["content?:string",{"_index":330,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('meta",{"_index":534,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["controller('post",{"_index":648,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('tags",{"_index":809,"title":{},"body":{"controllers/TagsController.html":{}}}],["controller('users",{"_index":960,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller,get,post,param,query",{"_index":955,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers:[authcontroller",{"_index":134,"title":{},"body":{"modules/AuthModule.html":{}}}],["courses",{"_index":1094,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":992,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":494,"title":{},"body":{"injectables/MetaOptionService.html":{},"classes/PatchPostDto.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["create(createmetaoptiondto",{"_index":500,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["create(createmetaoptiondto:createmetaoptiondto",{"_index":511,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["create(createpostdto",{"_index":685,"title":{},"body":{"injectables/PostService.html":{}}}],["create(createpostdto:createpostdto",{"_index":699,"title":{},"body":{"injectables/PostService.html":{}}}],["create(createtagdto",{"_index":773,"title":{},"body":{"injectables/TagService.html":{}}}],["create(createtagdto:createtagdto",{"_index":784,"title":{},"body":{"injectables/TagService.html":{}}}],["created",{"_index":539,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["created'})@post",{"_index":528,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["createdate",{"_index":746,"title":{},"body":{"entities/Tag.html":{}}}],["createdate:date",{"_index":765,"title":{},"body":{"entities/Tag.html":{}}}],["createdatecolumn",{"_index":466,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["createddate",{"_index":464,"title":{},"body":{"entities/MetaOption.html":{}}}],["createddate:date",{"_index":487,"title":{},"body":{"entities/MetaOption.html":{}}}],["createmetaoption",{"_index":519,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(@body",{"_index":540,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoption(createmetaoptiondto",{"_index":520,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createmetaoptiondto",{"_index":156,"title":{"classes/CreateMetaOptionDto.html":{}},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"coverage.html":{}}}],["createmetaoptiondto:createmetaoptiondto",{"_index":541,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["createpost",{"_index":610,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(@body",{"_index":658,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":614,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":180,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["createpostdto:createpostdto",{"_index":659,"title":{},"body":{"controllers/PostController.html":{}}}],["creates",{"_index":522,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["createtag",{"_index":798,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(@body",{"_index":812,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag(createtag",{"_index":799,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtag:createtagdto",{"_index":813,"title":{},"body":{"controllers/TagsController.html":{}}}],["createtagdto",{"_index":349,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"coverage.html":{}}}],["createuser",{"_index":853,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto",{"_index":859,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(createuserdto:createuserdto",{"_index":883,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto",{"_index":375,"title":{"classes/CreateUserDtO.html":{}},"body":{"classes/CreateUserDtO.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto:createuserdto",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers",{"_index":928,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":932,"title":{},"body":{"controllers/UsersController.html":{}}}],["creating",{"_index":687,"title":{},"body":{"injectables/PostService.html":{}}}],["database:configservice.get('database.name",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconfig",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":1089,"title":{},"body":{"index.html":{}}}],["default",{"_index":576,"title":{},"body":{"entities/Post.html":{},"miscellaneous/variables.html":{}}}],["default:posttype.post",{"_index":597,"title":{},"body":{"entities/Post.html":{}}}],["default:status.draft",{"_index":600,"title":{},"body":{"entities/Post.html":{}}}],["defaultvaluepipe(10),parseintpipe",{"_index":970,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":95,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["definig",{"_index":718,"title":{},"body":{"injectables/PostService.html":{}}}],["delete",{"_index":617,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{}}}],["delete('soft",{"_index":819,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(@query('id',parseintpipe)id:number",{"_index":816,"title":{},"body":{"controllers/TagsController.html":{}}}],["delete(id",{"_index":688,"title":{},"body":{"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{}}}],["delete(id:number",{"_index":723,"title":{},"body":{"injectables/PostService.html":{},"injectables/TagService.html":{}}}],["deleted",{"_index":666,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["deleted'})@delete",{"_index":621,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["deleted'})@delete('soft",{"_index":806,"title":{},"body":{"controllers/TagsController.html":{}}}],["deleted:true",{"_index":792,"title":{},"body":{"injectables/TagService.html":{}}}],["deleted:true,id:id",{"_index":732,"title":{},"body":{"injectables/PostService.html":{}}}],["deletedat",{"_index":747,"title":{},"body":{"entities/Tag.html":{}}}],["deletedat:date",{"_index":766,"title":{},"body":{"entities/Tag.html":{}}}],["deletedatecolumn",{"_index":749,"title":{},"body":{"entities/Tag.html":{}}}],["deletepost",{"_index":611,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(@query('id",{"_index":667,"title":{},"body":{"controllers/PostController.html":{}}}],["deletepost(id",{"_index":616,"title":{},"body":{"controllers/PostController.html":{}}}],["deletes",{"_index":801,"title":{},"body":{"controllers/TagsController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["description:`something",{"_index":896,"title":{},"body":{"injectables/UserService.html":{}}}],["description?:string",{"_index":369,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["development",{"_index":1061,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":1101,"title":{},"body":{"index.html":{}}}],["digit",{"_index":405,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["discord",{"_index":1086,"title":{},"body":{"index.html":{}}}],["displayed",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dive",{"_index":1088,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":993,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":503,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":873,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/getpostparams,dto",{"_index":645,"title":{},"body":{"controllers/PostController.html":{}}}],["dtos/login.auth.dto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/patch",{"_index":647,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["dtos/update",{"_index":957,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["e2e",{"_index":1071,"title":{},"body":{"index.html":{}}}],["each",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["eager",{"_index":564,"title":{},"body":{"entities/Post.html":{},"injectables/PostService.html":{}}}],["efficient",{"_index":1048,"title":{},"body":{"index.html":{}}}],["email",{"_index":147,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["email:\"waqar@wa.com",{"_index":917,"title":{},"body":{"injectables/UserService.html":{}}}],["email:\"wiqir@wa.com",{"_index":919,"title":{},"body":{"injectables/UserService.html":{}}}],["email:string",{"_index":429,"title":{},"body":{"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{},"entities/User.html":{}}}],["empty",{"_index":421,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["empty'})@isemail()@maxlength(96",{"_index":381,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["empty'})@isstring()@minlength(8",{"_index":407,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["empty'})@isstring({message",{"_index":392,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["enterprise",{"_index":1105,"title":{},"body":{"index.html":{}}}],["entities",{"_index":462,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"overview.html":{}}}],["entities:[user",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":460,"title":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{},"coverage.html":{}}}],["entries",{"_index":947,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enum\",example:\"page",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enum:posttype",{"_index":596,"title":{},"body":{"entities/Post.html":{}}}],["enum:status",{"_index":599,"title":{},"body":{"entities/Post.html":{}}}],["enumerations",{"_index":1036,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enums/status.enum",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["env",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["env.${process.env.node_env}`.trim",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["envfilepath:envpath,load:[appconfig,databaseconfig],validationschema:envronmentvalidation",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["environment=this.configservice.get('urld",{"_index":914,"title":{},"body":{"injectables/UserService.html":{}}}],["envpath",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envronmentvalidation",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["err",{"_index":901,"title":{},"body":{"injectables/UserService.html":{}}}],["errorcode",{"_index":899,"title":{},"body":{"injectables/UserService.html":{}}}],["etc",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["etc\",example:\"review",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["etc'})@isenum(status",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":167,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["example'})@isnotempty({message",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example:\"my",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["exapmle",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exceed",{"_index":382,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["exception",{"_index":904,"title":{},"body":{"injectables/UserService.html":{}}}],["existinguser=await",{"_index":886,"title":{},"body":{"injectables/UserService.html":{}}}],["existinguser=undefined",{"_index":884,"title":{},"body":{"injectables/UserService.html":{}}}],["experience",{"_index":1091,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exports:[tagservice",{"_index":829,"title":{},"body":{"modules/TagsModule.html":{}}}],["exports:[userservice",{"_index":990,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":551,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{}}}],["false",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["false,description",{"_index":341,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["false,description:\"content",{"_index":327,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["false,description:\"schema",{"_index":331,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["false,description:\"url",{"_index":336,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimage",{"_index":352,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["featuredimage?:string",{"_index":374,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["feautredimageurl",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["feautredimageurl?:string",{"_index":340,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetch",{"_index":628,"title":{},"body":{"controllers/PostController.html":{},"injectables/UserService.html":{}}}],["fetched",{"_index":940,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":868,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["few",{"_index":1075,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["find",{"_index":624,"title":{},"body":{"controllers/PostController.html":{}}}],["findall",{"_index":679,"title":{},"body":{"injectables/PostService.html":{}}}],["findall(userid",{"_index":690,"title":{},"body":{"injectables/PostService.html":{}}}],["findall(userid:string",{"_index":714,"title":{},"body":{"injectables/PostService.html":{}}}],["findmultipletags",{"_index":768,"title":{},"body":{"injectables/TagService.html":{}}}],["findmultipletags(tags",{"_index":776,"title":{},"body":{"injectables/TagService.html":{}}}],["findmultipletags(tags:number",{"_index":787,"title":{},"body":{"injectables/TagService.html":{}}}],["findonebyid",{"_index":854,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":861,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id:number",{"_index":920,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["follow",{"_index":1109,"title":{},"body":{"index.html":{}}}],["forexample",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["forwardref",{"_index":131,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":654,"title":{},"body":{"controllers/PostController.html":{}}}],["found'})@get('/:userid",{"_index":633,"title":{},"body":{"controllers/PostController.html":{}}}],["framework",{"_index":1046,"title":{},"body":{"index.html":{}}}],["full",{"_index":1104,"title":{},"body":{"index.html":{}}}],["function",{"_index":1003,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1041,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:email/:password/:id",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/:id",{"_index":962,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":943,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":655,"title":{},"body":{"controllers/PostController.html":{}}}],["get('/user/:id",{"_index":974,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/user/:id')@apioperation({summary",{"_index":937,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers",{"_index":855,"title":{},"body":{"injectables/UserService.html":{}}}],["getallusers(getuserparamsdto",{"_index":865,"title":{},"body":{"injectables/UserService.html":{}}}],["getallusers(getuserparamsdto:getuserparamsdto,limit:number,page:number",{"_index":913,"title":{},"body":{"injectables/UserService.html":{}}}],["getauthtoken",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["getauthtoken(@param",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["getauthtoken(param",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["getpostparamdto",{"_index":439,"title":{"classes/GetPostParamDto.html":{}},"body":{"classes/GetPostParamDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["getposts",{"_index":612,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(@param('userid",{"_index":656,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(userid",{"_index":623,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":863,"title":{"index.html":{}},"body":{"injectables/UserService.html":{}}}],["getuser",{"_index":929,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@param('id',parseintpipe",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(id",{"_index":936,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuserparamsdto",{"_index":445,"title":{"classes/GetUserParamsDto.html":{}},"body":{"classes/GetUserParamsDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getuserparamsdto:getuserparamsdto",{"_index":968,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":930,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param",{"_index":967,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamsdto",{"_index":942,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":1097,"title":{},"body":{"index.html":{}}}],["grow",{"_index":1120,"title":{},"body":{"index.html":{}}}],["handles",{"_index":850,"title":{},"body":{"injectables/UserService.html":{}}}],["hands",{"_index":1090,"title":{},"body":{"index.html":{}}}],["handy",{"_index":1078,"title":{},"body":{"index.html":{}}}],["having",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["header",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["hello",{"_index":99,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":1102,"title":{},"body":{"index.html":{}}}],["here",{"_index":1128,"title":{},"body":{"index.html":{}}}],["host:configservice.get('database.host",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["https://encrypted",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["https://nestjs.com",{"_index":1133,"title":{},"body":{"index.html":{}}}],["id",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["id\",example:12345",{"_index":452,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["id'})@apiparam({name",{"_index":626,"title":{},"body":{"controllers/PostController.html":{}}}],["id'})@apiresponse({status",{"_index":939,"title":{},"body":{"controllers/UsersController.html":{}}}],["id:in(tags",{"_index":790,"title":{},"body":{"injectables/TagService.html":{}}}],["id:number",{"_index":459,"title":{},"body":{"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["id?:number",{"_index":444,"title":{},"body":{"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{}}}],["identifier",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["if(existinguser",{"_index":905,"title":{},"body":{"injectables/UserService.html":{}}}],["if(metaoptions",{"_index":705,"title":{},"body":{"injectables/PostService.html":{}}}],["if(user",{"_index":924,"title":{},"body":{"injectables/UserService.html":{}}}],["image",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["imports:[typeormmodule.forfeature([metaoption",{"_index":548,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["imports:[typeormmodule.forfeature([tag",{"_index":828,"title":{},"body":{"modules/TagsModule.html":{}}}],["imports:[typeormmodule.forfeature([user",{"_index":991,"title":{},"body":{"modules/UsersModule.html":{}}}],["imports:[usersmodule,tagsmodule,typeormmodule.forfeature([post,metaoption,user",{"_index":677,"title":{},"body":{"modules/PostModule.html":{}}}],["index",{"_index":92,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ineger",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":89,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":90,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":650,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["injectrepository",{"_index":505,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["injectrepository(metaoption",{"_index":508,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostService.html":{}}}],["injectrepository(post",{"_index":696,"title":{},"body":{"injectables/PostService.html":{}}}],["injectrepository(tag",{"_index":782,"title":{},"body":{"injectables/TagService.html":{}}}],["injectrepository(user",{"_index":879,"title":{},"body":{"injectables/UserService.html":{}}}],["installcompile",{"_index":1059,"title":{},"body":{"index.html":{}}}],["instead",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["integers",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":1098,"title":{},"body":{"index.html":{}}}],["inversepost=await",{"_index":726,"title":{},"body":{"injectables/PostService.html":{}}}],["isarray",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["isauth(id",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{}}}],["isauth(id:number",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":417,"title":{},"body":{"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{}}}],["isenum",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status",{"_index":325,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isin",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":172,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isjson({message:\"schema",{"_index":334,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":173,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail",{"_index":454,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["isnotempty()@isstring",{"_index":457,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["isnotempty()@type(undefined",{"_index":441,"title":{},"body":{"classes/GetPostParamDto.html":{},"classes/LoginAuthDto.html":{}}}],["isnotempty({message:\"email",{"_index":427,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["isnotempty({message:\"name",{"_index":420,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["isnotempty({message:\"password",{"_index":432,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["isnotempty({message:\"please",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isnumber",{"_index":450,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["isobject",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetUserParamsDto.html":{}}}],["isstring",{"_index":174,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/LoginAuthDto.html":{}}}],["isstring({message:\"content",{"_index":329,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring({message:\"name",{"_index":422,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["isstring({message:\"schema",{"_index":333,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring({message:\"slug",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["isstring({message:\"title",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isurl",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["job",{"_index":1113,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":1115,"title":{},"body":{"index.html":{}}}],["john@123",{"_index":406,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["johnbhai",{"_index":391,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["johnbhai@gmail.com",{"_index":379,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["joi",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["join",{"_index":1126,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":482,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["jointable",{"_index":591,"title":{},"body":{"entities/Post.html":{}}}],["json",{"_index":166,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{}}}],["json\",example",{"_index":177,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["json\",example:\"{\\\"keyschemapostdto",{"_index":332,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":1130,"title":{},"body":{"index.html":{}}}],["keymetaoptiondto",{"_index":168,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["keyschemapostdto",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["later",{"_index":895,"title":{},"body":{"injectables/UserService.html":{}}}],["learn",{"_index":1082,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":569,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["length:1024",{"_index":601,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["length:256",{"_index":762,"title":{},"body":{"entities/Tag.html":{}}}],["length:30",{"_index":845,"title":{},"body":{"entities/User.html":{}}}],["length:96",{"_index":846,"title":{},"body":{"entities/User.html":{}}}],["letters",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["license",{"_index":1136,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":1118,"title":{},"body":{"index.html":{}}}],["limit",{"_index":866,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["limit:number,@query('page',parseintpipe",{"_index":971,"title":{},"body":{"controllers/UsersController.html":{}}}],["linkedin",{"_index":1111,"title":{},"body":{"index.html":{}}}],["list",{"_index":870,"title":{},"body":{"injectables/UserService.html":{}}}],["logged",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["login(email",{"_index":144,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email:string,password:string,id:number",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginauthdto",{"_index":107,"title":{"classes/LoginAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["looking",{"_index":1112,"title":{},"body":{"index.html":{}}}],["loop",{"_index":1107,"title":{},"body":{"index.html":{}}}],["manytomany",{"_index":592,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytomany(undefined",{"_index":586,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone",{"_index":593,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["manytoone(()=>user",{"_index":605,"title":{},"body":{"entities/Post.html":{}}}],["manytoone(undefined",{"_index":562,"title":{},"body":{"entities/Post.html":{}}}],["matches",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{}}}],["matches(/^(?=.*[a",{"_index":436,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["matches(/^[a",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":399,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["maximum",{"_index":389,"title":{},"body":{"classes/CreateUserDtO.html":{},"injectables/UserService.html":{}}}],["maxlength",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{}}}],["maxlength(1024",{"_index":339,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["maxlength(256",{"_index":366,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(30,{message:\"name",{"_index":424,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["maxlength(512",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["maxlength(96,{message:\"email",{"_index":428,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["maxlength(96,{message:\"password",{"_index":435,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["means",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["meat",{"_index":698,"title":{},"body":{"injectables/PostService.html":{}}}],["meatoption",{"_index":512,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["meatoptionservice:metaoptionservice",{"_index":536,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["message",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{}}}],["meta",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["metadata",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["metaoption",{"_index":461,"title":{"entities/MetaOption.html":{}},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["metaoption'})@apiresponse({status",{"_index":619,"title":{},"body":{"controllers/PostController.html":{}}}],["metaoption.post",{"_index":573,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionrepository",{"_index":499,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostService.html":{}}}],["metaoptionrepository:repository",{"_index":510,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostService.html":{}}}],["metaoptions",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["metaoptions.dto",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{}}}],["metaoptions.dto.ts",{"_index":160,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:8",{"_index":170,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["metaoptions=createpostdto.metaoptions?this.metaoptionrepository.create(createpostdto.metaoptions):null",{"_index":704,"title":{},"body":{"injectables/PostService.html":{}}}],["metaoptions?:metaoption",{"_index":604,"title":{},"body":{"entities/Post.html":{}}}],["metaoptionscontroller",{"_index":516,"title":{"controllers/MetaOptionsController.html":{}},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{}}}],["metaoptionservice",{"_index":491,"title":{"injectables/MetaOptionService.html":{}},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"coverage.html":{},"overview.html":{}}}],["metaoptionsmodule",{"_index":31,"title":{"modules/MetaOptionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["metavalue",{"_index":162,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"entities/MetaOption.html":{}}}],["metavalue:string",{"_index":179,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"entities/MetaOption.html":{}}}],["methods",{"_index":93,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["min",{"_index":394,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["minimum",{"_index":386,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["minimun",{"_index":397,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["minlength",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{}}}],["minlength(3",{"_index":367,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["minlength(3,{message:\"min",{"_index":423,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["minlength(4",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8,{message:\"paswword",{"_index":433,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["miscellaneous",{"_index":1035,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1117,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1064,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":1083,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1131,"title":{},"body":{"index.html":{}}}],["name",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["name'})@maxlength(30",{"_index":395,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["name:\"waqar",{"_index":916,"title":{},"body":{"injectables/UserService.html":{}}}],["name:\"wiqi",{"_index":918,"title":{},"body":{"injectables/UserService.html":{}}}],["name:string",{"_index":368,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["need",{"_index":553,"title":{},"body":{"classes/PatchPostDto.html":{},"index.html":{}}}],["nest",{"_index":1053,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1135,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1080,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1018,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":833,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetUserParamsDto.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"injectables/MetaOptionService.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"modules/TagsModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":523,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["newuser",{"_index":907,"title":{},"body":{"injectables/UserService.html":{}}}],["newuser=await",{"_index":909,"title":{},"body":{"injectables/UserService.html":{}}}],["node.js",{"_index":1045,"title":{},"body":{"index.html":{}}}],["npm",{"_index":1058,"title":{},"body":{"index.html":{}}}],["null",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nullable",{"_index":471,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["nullable:false",{"_index":486,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["nullable:true",{"_index":764,"title":{},"body":{"entities/Tag.html":{}}}],["number",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["object",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":1114,"title":{},"body":{"index.html":{}}}],["official",{"_index":1092,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":475,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["one",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["onetomany",{"_index":844,"title":{},"body":{"entities/User.html":{}}}],["onetomany(()=>post,(post)=>post.author",{"_index":847,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":841,"title":{},"body":{"entities/User.html":{}}}],["onetoone",{"_index":483,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["onetoone(()=>metaoption,(metaoption)=>metaoption.post,{cascade:true,eager:true",{"_index":602,"title":{},"body":{"entities/Post.html":{}}}],["onetoone(()=>metaoption,{cascade:['remove','insert",{"_index":603,"title":{},"body":{"entities/Post.html":{}}}],["onetoone(()=>post,(post)=>post.metaoptions,{ondelete:'cascade",{"_index":489,"title":{},"body":{"entities/MetaOption.html":{}}}],["onetoone(undefined",{"_index":473,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{}}}],["open",{"_index":1119,"title":{},"body":{"index.html":{}}}],["operations",{"_index":851,"title":{},"body":{"injectables/UserService.html":{}}}],["option",{"_index":506,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"injectables/PostService.html":{}}}],["optional",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["options",{"_index":518,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.controller",{"_index":546,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options.controller.ts",{"_index":517,"title":{},"body":{"controllers/MetaOptionsController.html":{},"coverage.html":{}}}],["options.controller.ts:13",{"_index":529,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["options.entity",{"_index":504,"title":{},"body":{"injectables/MetaOptionService.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["options.entity.ts",{"_index":463,"title":{},"body":{"entities/MetaOption.html":{},"coverage.html":{}}}],["options.entity.ts:13",{"_index":472,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:16",{"_index":467,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:19",{"_index":479,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:23",{"_index":477,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.entity.ts:7",{"_index":469,"title":{},"body":{"entities/MetaOption.html":{}}}],["options.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{}}}],["options.module.ts",{"_index":545,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["options/dtos/create",{"_index":159,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["options/meta",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["options/providers/metaoption.service.ts",{"_index":492,"title":{},"body":{"injectables/MetaOptionService.html":{},"coverage.html":{}}}],["options/providers/metaoption.service.ts:16",{"_index":501,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["options/providers/metaoption.service.ts:8",{"_index":498,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["out",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":1140,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1013,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page'})@isnotempty({message",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["page:number",{"_index":972,"title":{},"body":{"controllers/UsersController.html":{}}}],["pages",{"_index":950,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination",{"_index":869,"title":{},"body":{"injectables/UserService.html":{}}}],["paragraph",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["param",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["param:loginauthdto",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto",{"_index":874,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto.ts",{"_index":447,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:9",{"_index":449,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["parseintpipe",{"_index":642,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["parseintpipe,defaultvaluepipe,validationpipe",{"_index":956,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":1103,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":556,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpostdto",{"_index":552,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":832,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passed",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":145,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{},"entities/User.html":{}}}],["password:configservice.get('database.password",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["password:string",{"_index":438,"title":{},"body":{"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{},"entities/User.html":{}}}],["paswword",{"_index":408,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["patch",{"_index":640,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":549,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["pg",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"injectables/UserService.html":{},"index.html":{}}}],["port",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":213,"title":{"entities/Post.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/MetaOption.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post\",example:\"https://encrypted",{"_index":337,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@apiresponse({status",{"_index":525,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["post'})@isenum(posttype",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isnotempty({message",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post'})@isstring({message",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["post()@apioperation({summary",{"_index":933,"title":{},"body":{"controllers/UsersController.html":{}}}],["post,body",{"_index":639,"title":{},"body":{"controllers/PostController.html":{}}}],["post.author",{"_index":842,"title":{},"body":{"entities/User.html":{}}}],["post.content=patchpostdto.content??post.content",{"_index":740,"title":{},"body":{"injectables/PostService.html":{}}}],["post.controller",{"_index":673,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":557,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["post.dto.ts",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:13",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:18",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:25",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:30",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:35",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:41",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:47",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:52",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:68",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:83",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:88",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:9",{"_index":555,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.entity",{"_index":674,"title":{},"body":{"modules/PostModule.html":{},"injectables/PostService.html":{}}}],["post.feautredimageurl=patchpostdto.feautredimageurl??post.feautredimageurl",{"_index":742,"title":{},"body":{"injectables/PostService.html":{}}}],["post.metaoptions",{"_index":474,"title":{},"body":{"entities/MetaOption.html":{}}}],["post.metaoptions=metaoptions",{"_index":712,"title":{},"body":{"injectables/PostService.html":{}}}],["post.posttype=patchpostdto.posttype??post.posttype",{"_index":737,"title":{},"body":{"injectables/PostService.html":{}}}],["post.publishedon=patchpostdto.publishedon??post.publishedon",{"_index":743,"title":{},"body":{"injectables/PostService.html":{}}}],["post.schema=patchpostdto.schema??post.schema",{"_index":741,"title":{},"body":{"injectables/PostService.html":{}}}],["post.slug=patchpostdto.slug??post.slug",{"_index":738,"title":{},"body":{"injectables/PostService.html":{}}}],["post.status=patchpostdto.status??post.status",{"_index":739,"title":{},"body":{"injectables/PostService.html":{}}}],["post.tags",{"_index":756,"title":{},"body":{"entities/Tag.html":{}}}],["post.tags=tags",{"_index":744,"title":{},"body":{"injectables/PostService.html":{}}}],["post.title=patchpostdto.title??post.title",{"_index":736,"title":{},"body":{"injectables/PostService.html":{}}}],["post/post.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["post:post",{"_index":490,"title":{},"body":{"entities/MetaOption.html":{}}}],["post=await",{"_index":719,"title":{},"body":{"injectables/PostService.html":{}}}],["post=this.postrepository.create({...createpostdto,author:user,tags:tags",{"_index":711,"title":{},"body":{"injectables/PostService.html":{}}}],["postcontroller",{"_index":608,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postmodule",{"_index":32,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postrepository",{"_index":681,"title":{},"body":{"injectables/PostService.html":{}}}],["postrepository:repository",{"_index":697,"title":{},"body":{"injectables/PostService.html":{}}}],["posts",{"_index":625,"title":{},"body":{"controllers/PostController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["posts:post",{"_index":848,"title":{},"body":{"entities/User.html":{}}}],["postservice",{"_index":643,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postservice:postservice",{"_index":652,"title":{},"body":{"controllers/PostController.html":{}}}],["posttype",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype:posttype",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":468,"title":{},"body":{"entities/MetaOption.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":509,"title":{},"body":{"injectables/MetaOptionService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["process",{"_index":892,"title":{},"body":{"injectables/UserService.html":{}}}],["process.env.node_env",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["production",{"_index":1066,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":1044,"title":{},"body":{"index.html":{}}}],["project",{"_index":1056,"title":{},"body":{"index.html":{}}}],["properties",{"_index":161,"title":{"properties.html":{}},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["provide",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/metaoption.service",{"_index":533,"title":{},"body":{"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{}}}],["providers/post.service",{"_index":644,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["providers/tag.service",{"_index":808,"title":{},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{}}}],["providers/user.services",{"_index":958,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providers:[metaoptionservice",{"_index":547,"title":{},"body":{"modules/MetaOptionsModule.html":{}}}],["providers:[postservice",{"_index":676,"title":{},"body":{"modules/PostModule.html":{}}}],["providers:[tagservice",{"_index":827,"title":{},"body":{"modules/TagsModule.html":{}}}],["providers:[userservice",{"_index":989,"title":{},"body":{"modules/UsersModule.html":{}}}],["prpperty",{"_index":507,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/TagService.html":{}}}],["public",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published\",example",{"_index":342,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishedon",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["queries",{"_index":951,"title":{},"body":{"controllers/UsersController.html":{}}}],["queries'})@apiquery({name",{"_index":948,"title":{},"body":{"controllers/UsersController.html":{}}}],["queries'})@apiresponse({status",{"_index":944,"title":{},"body":{"controllers/UsersController.html":{}}}],["query",{"_index":641,"title":{},"body":{"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["query('limit',new",{"_index":969,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":1084,"title":{},"body":{"index.html":{}}}],["read",{"_index":1127,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":1099,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":903,"title":{},"body":{"injectables/UserService.html":{}}}],["related",{"_index":618,"title":{},"body":{"controllers/PostController.html":{},"injectables/UserService.html":{}}}],["relation",{"_index":717,"title":{},"body":{"injectables/PostService.html":{},"controllers/TagsController.html":{}}}],["relations:{post:true",{"_index":729,"title":{},"body":{"injectables/PostService.html":{}}}],["removes",{"_index":802,"title":{},"body":{"controllers/TagsController.html":{}}}],["repository",{"_index":497,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["representing",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["request",{"_index":893,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["requesttimeoutexception",{"_index":872,"title":{},"body":{"injectables/UserService.html":{}}}],["requesttimeoutexception(['unable",{"_index":911,"title":{},"body":{"injectables/UserService.html":{}}}],["required",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":1076,"title":{},"body":{"index.html":{}}}],["response",{"_index":527,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"controllers/TagsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["results=await",{"_index":788,"title":{},"body":{"injectables/TagService.html":{}}}],["return",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["review'})@isnotempty({message",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["run",{"_index":1060,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":878,"title":{},"body":{"injectables/UserService.html":{},"dependencies.html":{}}}],["scalable",{"_index":1049,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["schema?:string",{"_index":335,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["sehduled",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":1050,"title":{},"body":{"index.html":{}}}],["service",{"_index":651,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["setup",{"_index":1057,"title":{},"body":{"index.html":{}}}],["sholud",{"_index":164,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["side",{"_index":1051,"title":{},"body":{"index.html":{}}}],["sidebaropened",{"_index":346,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["single",{"_index":864,"title":{},"body":{"injectables/UserService.html":{}}}],["slug",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"entities/Tag.html":{}}}],["slug:string",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Tag.html":{}}}],["small",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["soft",{"_index":805,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete",{"_index":769,"title":{},"body":{"injectables/TagService.html":{},"controllers/TagsController.html":{}}}],["softdelete(@query('id',parseintpipe)id:number",{"_index":820,"title":{},"body":{"controllers/TagsController.html":{}}}],["softdelete(id",{"_index":778,"title":{},"body":{"injectables/TagService.html":{},"controllers/TagsController.html":{}}}],["softdelete(id:number",{"_index":793,"title":{},"body":{"injectables/TagService.html":{}}}],["softdeleted:true",{"_index":795,"title":{},"body":{"injectables/TagService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["space",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["spaces",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["special",{"_index":404,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["specific",{"_index":524,"title":{},"body":{"controllers/MetaOptionsController.html":{},"controllers/TagsController.html":{}}}],["specified",{"_index":630,"title":{},"body":{"controllers/PostController.html":{}}}],["sponsors",{"_index":1122,"title":{},"body":{"index.html":{}}}],["src/.../app.module.ts",{"_index":1147,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1042,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":1037,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":1038,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app.service.ts",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:10",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":130,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/login.auth.dto.ts",{"_index":453,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.auth.dto.ts:11",{"_index":455,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["src/auth/dtos/login.auth.dto.ts:15",{"_index":458,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["src/auth/dtos/login.auth.dto.ts:7",{"_index":456,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["src/auth/providers/auth.service",{"_index":875,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:7",{"_index":146,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":1002,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/meta",{"_index":158,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"modules/MetaOptionsModule.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/dtos/create",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/getpostparams,dto.ts",{"_index":440,"title":{},"body":{"classes/GetPostParamDto.html":{},"coverage.html":{}}}],["src/post/dtos/getpostparams,dto.ts:7",{"_index":442,"title":{},"body":{"classes/GetPostParamDto.html":{}}}],["src/post/dtos/patch",{"_index":550,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":1039,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/status.enum.ts",{"_index":1040,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":609,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:28",{"_index":634,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:36",{"_index":615,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:44",{"_index":638,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:51",{"_index":622,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.entity",{"_index":480,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["src/post/post.entity.ts",{"_index":560,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/post/post.entity.ts:12",{"_index":572,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:19",{"_index":590,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:27",{"_index":578,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:35",{"_index":584,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:43",{"_index":585,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:49",{"_index":567,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:55",{"_index":581,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:62",{"_index":571,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:68",{"_index":580,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:72",{"_index":575,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:75",{"_index":565,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.entity.ts:80",{"_index":589,"title":{},"body":{"entities/Post.html":{}}}],["src/post/post.module.ts",{"_index":672,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/providers/post.service.ts",{"_index":678,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/providers/post.service.ts:13",{"_index":684,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/providers/post.service.ts:40",{"_index":686,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/providers/post.service.ts:56",{"_index":691,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/providers/post.service.ts:66",{"_index":689,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/providers/post.service.ts:78",{"_index":693,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/dtos/create",{"_index":350,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tags/providers/tag.service",{"_index":694,"title":{},"body":{"injectables/PostService.html":{}}}],["src/tags/providers/tag.service.ts",{"_index":767,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["src/tags/providers/tag.service.ts:17",{"_index":774,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tags/providers/tag.service.ts:22",{"_index":777,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tags/providers/tag.service.ts:31",{"_index":775,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tags/providers/tag.service.ts:39",{"_index":779,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tags/providers/tag.service.ts:8",{"_index":771,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tags/tag.entity",{"_index":595,"title":{},"body":{"entities/Post.html":{},"modules/PostModule.html":{}}}],["src/tags/tag.entity.ts",{"_index":745,"title":{},"body":{"entities/Tag.html":{},"coverage.html":{}}}],["src/tags/tag.entity.ts:15",{"_index":755,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:23",{"_index":759,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:29",{"_index":751,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:35",{"_index":758,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:42",{"_index":752,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:45",{"_index":748,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:48",{"_index":760,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:51",{"_index":750,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:54",{"_index":757,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tag.entity.ts:7",{"_index":753,"title":{},"body":{"entities/Tag.html":{}}}],["src/tags/tags.controller.ts",{"_index":797,"title":{},"body":{"controllers/TagsController.html":{},"coverage.html":{}}}],["src/tags/tags.controller.ts:14",{"_index":800,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:21",{"_index":804,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.controller.ts:29",{"_index":807,"title":{},"body":{"controllers/TagsController.html":{}}}],["src/tags/tags.module",{"_index":675,"title":{},"body":{"modules/PostModule.html":{}}}],["src/tags/tags.module.ts",{"_index":825,"title":{},"body":{"modules/TagsModule.html":{}}}],["src/users/dtos/create",{"_index":376,"title":{},"body":{"classes/CreateUserDtO.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":446,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/update",{"_index":831,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.services",{"_index":149,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["src/users/providers/user.services.ts",{"_index":849,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.services.ts:16",{"_index":857,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.services.ts:40",{"_index":860,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.services.ts:82",{"_index":867,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.services.ts:99",{"_index":862,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/user.entity",{"_index":594,"title":{},"body":{"entities/Post.html":{},"modules/PostModule.html":{}}}],["src/users/user.entity.ts",{"_index":836,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:14",{"_index":839,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:23",{"_index":837,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:30",{"_index":840,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:33",{"_index":843,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:7",{"_index":838,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":927,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:18",{"_index":952,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:25",{"_index":941,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:33",{"_index":935,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:37",{"_index":954,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":133,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":987,"title":{},"body":{"modules/UsersModule.html":{}}}],["sschema",{"_index":360,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["start",{"_index":1062,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1065,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":1067,"title":{},"body":{"index.html":{}}}],["started",{"_index":1043,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1055,"title":{},"body":{"index.html":{}}}],["statements",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":142,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"miscellaneous/enumerations.html":{}}}],["status:status",{"_index":326,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["status:true,id:id",{"_index":155,"title":{},"body":{"injectables/AuthService.html":{}}}],["stay",{"_index":1106,"title":{},"body":{"index.html":{}}}],["story",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":98,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["string\",example:\"john@123\",required:true",{"_index":431,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["string\",example:\"johnbhai\",required:true",{"_index":419,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["string\",example:\"johnbhai@gmail.com\",required:true",{"_index":426,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["string\",example:\"this",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string\",example:\"{\\\"tagschemapost",{"_index":371,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@apiresponse({status",{"_index":629,"title":{},"body":{"controllers/PostController.html":{}}}],["string'})@isoptional",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isjson({message",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@maxlength(256)@matches(/^[a",{"_index":364,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["string'})@maxlength(512)@matches(/^[a",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@maxlength(512)@minlength(4",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@minlength(3",{"_index":393,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["sucessfully",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["sucessfully'})@apiquery({name",{"_index":945,"title":{},"body":{"controllers/UsersController.html":{}}}],["summary",{"_index":653,"title":{},"body":{"controllers/PostController.html":{}}}],["support",{"_index":1085,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1138,"title":{},"body":{"modules.html":{}}}],["synchronize:configservice.get('database.synchronize",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1012,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":276,"title":{"entities/Tag.html":{}},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tag.dto",{"_index":781,"title":{},"body":{"injectables/TagService.html":{},"controllers/TagsController.html":{}}}],["tag.dto.ts",{"_index":351,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:10",{"_index":359,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:17",{"_index":365,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:22",{"_index":354,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:27",{"_index":363,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:33",{"_index":357,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.entity",{"_index":780,"title":{},"body":{"injectables/TagService.html":{},"modules/TagsModule.html":{}}}],["tag.posts",{"_index":587,"title":{},"body":{"entities/Post.html":{}}}],["tag=this.tagrepository.create(createtagdto",{"_index":785,"title":{},"body":{"injectables/TagService.html":{}}}],["tagrepository",{"_index":772,"title":{},"body":{"injectables/TagService.html":{}}}],["tagrepository:repository",{"_index":783,"title":{},"body":{"injectables/TagService.html":{}}}],["tags",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{}}}],["tags.controller",{"_index":826,"title":{},"body":{"modules/TagsModule.html":{}}}],["tags/tags.module",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["tags:true",{"_index":722,"title":{},"body":{"injectables/PostService.html":{}}}],["tags=await",{"_index":709,"title":{},"body":{"injectables/PostService.html":{}}}],["tagschemapost",{"_index":361,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tagscontroller",{"_index":796,"title":{"controllers/TagsController.html":{}},"body":{"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{}}}],["tagservice",{"_index":683,"title":{"injectables/TagService.html":{}},"body":{"injectables/PostService.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"modules/TagsModule.html":{},"coverage.html":{},"overview.html":{}}}],["tagservice:tagservice",{"_index":811,"title":{},"body":{"controllers/TagsController.html":{}}}],["tagsmodule",{"_index":33,"title":{"modules/TagsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules.html":{},"overview.html":{}}}],["tagsservice",{"_index":682,"title":{},"body":{"injectables/PostService.html":{}}}],["tbn0.gstatic.com/images?q=tbn:and9gctvik0ntt",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["test",{"_index":1070,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":1073,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1072,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1068,"title":{},"body":{"index.html":{}}}],["text",{"_index":566,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{}}}],["thanks",{"_index":1121,"title":{},"body":{"index.html":{}}}],["this.authservice.login(param.email,param.password,param.id",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.meatoptionservice.create(createmetaoptiondto",{"_index":542,"title":{},"body":{"controllers/MetaOptionsController.html":{}}}],["this.metaoptionrepository.create(createmetaoptiondto",{"_index":513,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["this.metaoptionrepository.delete(id",{"_index":731,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.delete(post.metaoptions.id",{"_index":730,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.find",{"_index":727,"title":{},"body":{"injectables/PostService.html":{}}}],["this.metaoptionrepository.save(meatoption",{"_index":515,"title":{},"body":{"injectables/MetaOptionService.html":{}}}],["this.metaoptionrepository.save(metaoptions",{"_index":706,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.delete(id",{"_index":725,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.find({relations:{metaoptions:true",{"_index":720,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findoneby({id",{"_index":724,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.findoneby({id:patchpostdto.id",{"_index":735,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postrepository.save(post",{"_index":713,"title":{},"body":{"injectables/PostService.html":{}}}],["this.postservice.create(createpostdto",{"_index":660,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.delete(id",{"_index":668,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.findall(userid",{"_index":657,"title":{},"body":{"controllers/PostController.html":{}}}],["this.postservice.update(patchpostdto",{"_index":664,"title":{},"body":{"controllers/PostController.html":{}}}],["this.tagrepository.delete(id",{"_index":791,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.find",{"_index":789,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.save(tag",{"_index":786,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagrepository.softdelete(id",{"_index":794,"title":{},"body":{"injectables/TagService.html":{}}}],["this.tagservice.create(createtag",{"_index":814,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagservice.delete(id",{"_index":817,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagservice.softdelete(id",{"_index":821,"title":{},"body":{"controllers/TagsController.html":{}}}],["this.tagsservice.findmultipletags(createpostdto.tags",{"_index":710,"title":{},"body":{"injectables/PostService.html":{}}}],["this.tagsservice.findmultipletags(patchpostdto.tags",{"_index":734,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userrepository.create(createuserdto",{"_index":908,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":887,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findoneby({id",{"_index":922,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":910,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findonebyid(createpostdto.authorid",{"_index":708,"title":{},"body":{"injectables/PostService.html":{}}}],["this.userservice.findonebyid(id",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.getallusers(getuserparamsdto,limit,page",{"_index":973,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":890,"title":{},"body":{"injectables/UserService.html":{}}}],["time",{"_index":1100,"title":{},"body":{"index.html":{}}}],["timeouterror",{"_index":877,"title":{},"body":{"injectables/UserService.html":{}}}],["timestamp",{"_index":579,"title":{},"body":{"entities/Post.html":{}}}],["title",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["title:string",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["touch",{"_index":1129,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"dependencies.html":{}}}],["true",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["true})@isnotempty({message",{"_index":380,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["true})@jointable",{"_index":588,"title":{},"body":{"entities/Post.html":{}}}],["true})@type(undefined",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["try",{"_index":885,"title":{},"body":{"injectables/UserService.html":{}}}],["twitter",{"_index":1134,"title":{},"body":{"index.html":{}}}],["type",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"controllers/MetaOptionsController.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"controllers/TagsController.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["type(()=>number",{"_index":443,"title":{},"body":{"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{}}}],["type:\"json",{"_index":485,"title":{},"body":{"entities/MetaOption.html":{}}}],["type:\"postgres",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["type:\"text",{"_index":763,"title":{},"body":{"entities/Tag.html":{}}}],["type:\"varchar",{"_index":761,"title":{},"body":{"entities/Tag.html":{},"entities/User.html":{}}}],["typeorm",{"_index":484,"title":{},"body":{"entities/MetaOption.html":{},"injectables/MetaOptionService.html":{},"entities/Post.html":{},"injectables/PostService.html":{},"entities/Tag.html":{},"injectables/TagService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":834,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":1054,"title":{},"body":{"index.html":{}}}],["unable",{"_index":891,"title":{},"body":{"injectables/UserService.html":{}}}],["undefined",{"_index":577,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@apipropertyoptional({description",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@isarray()@isint({each",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["undefined})@isoptional()@validatenested({each",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":583,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["unique:true",{"_index":598,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["unit",{"_index":1069,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":502,"title":{},"body":{"injectables/MetaOptionService.html":{},"injectables/PostService.html":{},"injectables/TagService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":1145,"title":{},"body":{"properties.html":{}}}],["update",{"_index":636,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["update(patchpostdto",{"_index":692,"title":{},"body":{"injectables/PostService.html":{}}}],["update(patchpostdto:patchpostdto",{"_index":733,"title":{},"body":{"injectables/PostService.html":{}}}],["updated",{"_index":559,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@isnotempty()@isint",{"_index":554,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated'})@patch",{"_index":637,"title":{},"body":{"controllers/PostController.html":{}}}],["updatedate",{"_index":465,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedate:date",{"_index":488,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatedatecolumn",{"_index":478,"title":{},"body":{"entities/MetaOption.html":{},"entities/Tag.html":{}}}],["updatepost",{"_index":613,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":663,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":635,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":1108,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":830,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updateuserdto:updateuserdto",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateusers",{"_index":931,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateusers(@body",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateusers(updateuserdto",{"_index":953,"title":{},"body":{"controllers/UsersController.html":{}}}],["upper",{"_index":402,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["url",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["url\",example:\"https://encrypted",{"_index":373,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["use",{"_index":716,"title":{},"body":{"injectables/PostService.html":{}}}],["used",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["usefactory:(configservice:configservice",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":48,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"classes/GetUserParamsDto.html":{},"entities/Post.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"entities/User.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["user'})@apiresponse({status",{"_index":631,"title":{},"body":{"controllers/PostController.html":{}}}],["user)=>user.posts,{eager:true",{"_index":606,"title":{},"body":{"entities/Post.html":{}}}],["user.dto",{"_index":835,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":377,"title":{},"body":{"classes/CreateUserDtO.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":396,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["user.dto.ts:17",{"_index":385,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["user.dto.ts:25",{"_index":416,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["user.entity",{"_index":876,"title":{},"body":{"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.posts",{"_index":563,"title":{},"body":{"entities/Post.html":{}}}],["user=await",{"_index":707,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["user=this.userservice.findonebyid",{"_index":715,"title":{},"body":{"injectables/PostService.html":{}}}],["user=undefined",{"_index":921,"title":{},"body":{"injectables/UserService.html":{}}}],["userid",{"_index":627,"title":{},"body":{"controllers/PostController.html":{},"injectables/PostService.html":{}}}],["username:configservice.get('database.user",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":858,"title":{},"body":{"injectables/UserService.html":{}}}],["userrepository:repository",{"_index":880,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":852,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":988,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/user.entity",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":926,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":148,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userservice:userservice",{"_index":695,"title":{},"body":{"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":34,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["using",{"_index":703,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["usrcrte1",{"_index":900,"title":{},"body":{"injectables/UserService.html":{}}}],["usrcrte2",{"_index":912,"title":{},"body":{"injectables/UserService.html":{}}}],["usrfnde1",{"_index":923,"title":{},"body":{"injectables/UserService.html":{}}}],["valid",{"_index":165,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{}}}],["validatenested",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":175,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":178,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value\"}'})@isjson()@isoptional",{"_index":362,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["value\"}'})@isstring()@isnotempty()@isjson",{"_index":169,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["value\"}'})@isstring({message",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":568,"title":{},"body":{"entities/Post.html":{},"entities/Tag.html":{},"entities/User.html":{}}}],["variable",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1146,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":1143,"title":{},"body":{"properties.html":{}}}],["vhxrw8wgwhbzq",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["video",{"_index":1093,"title":{},"body":{"index.html":{}}}],["visit",{"_index":1081,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":1095,"title":{},"body":{"index.html":{}}}],["watch",{"_index":1063,"title":{},"body":{"index.html":{}}}],["website",{"_index":1132,"title":{},"body":{"index.html":{}}}],["went",{"_index":897,"title":{},"body":{"injectables/UserService.html":{}}}],["where:{email:createuserdto.email",{"_index":888,"title":{},"body":{"injectables/UserService.html":{}}}],["where:{id:post.metaoptions.id",{"_index":728,"title":{},"body":{"injectables/PostService.html":{}}}],["without",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["words",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["words\",example:\"this",{"_index":328,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":1079,"title":{},"body":{"index.html":{}}}],["world",{"_index":100,"title":{},"body":{"injectables/AppService.html":{}}}],["writing",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["wrong",{"_index":898,"title":{},"body":{"injectables/UserService.html":{}}}],["x",{"_index":1110,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":1125,"title":{},"body":{"index.html":{}}}],["z0",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["z\\d#$@!%&*?]{8,30",{"_index":414,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["z\\d#$@!%&*?]{8,30}$/,{message:\"password",{"_index":437,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["z])(?=.*[a",{"_index":411,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["z])(?=.*\\d)(?=.*[#$@!%&*?])[a",{"_index":412,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["za",{"_index":413,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["zoom",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MetaOptionsModule.html":{},"modules/PostModule.html":{},"modules/TagsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            MetaOptionsModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { AuthController } from './auth/auth.controller';\nimport { AuthModule } from './auth/auth.module';\nimport {TypeOrmModule} from \"@nestjs/typeorm\"\nimport { User } from './users/user.entity';\nimport { TagsModule } from './tags/tags.module';\nimport { MetaOptionsModule } from './meta-options/meta-options.module';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport appConfig from \"./config/app.config\"\nimport dataBaseConfig from \"./config/database.config\"\nimport envronmentValidation from './config/envronment.validation';\n\n\nconst envPath = process.env.NODE_ENV ? `.env.${process.env.NODE_ENV}`.trim(): '.env';\n\n@Module({\n  imports: [UsersModule, PostModule, AuthModule,\n    ConfigModule.forRoot({isGlobal:true,  envFilePath:envPath,load:[appConfig,dataBaseConfig],validationSchema:envronmentValidation}),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n    useFactory:(configService:ConfigService)=> {\n      return{\n      type:\"postgres\",\n      // entities:[User],\n      // logging: true,\n      // logger: 'advanced-console',\n      autoLoadEntities:configService.get('database.autoLoadEntities'),\n      synchronize:configService.get('database.synchronize'),\n      port: configService.get('database.port'),\n      username:configService.get('database.user'),\n      password:configService.get('database.password'),\n      host:configService.get('database.host'),\n      database:configService.get('database.name')  \n    }\n  }\n   \n  }), TagsModule, MetaOptionsModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                getAuthToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getAuthToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthToken(param: LoginAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:email/:password/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                                            LoginAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { LoginAuthDto } from './dtos/login.auth.dto';\nimport { ApiTags } from '@nestjs/swagger';\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n    constructor(private readonly authService:AuthService){}\n    @Get('/:email/:password/:id')\n    public getAuthToken(@Param() param:LoginAuthDto){\n        return this.authService.login(param.email,param.password,param.id)\n     }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers:[AuthController],\n  providers: [AuthService],\n  imports:[],\n  exports:[]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { status: boolean; id: number; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.services';\n\n@Injectable()\nexport class AuthService {\n\n    public login(email:string,password:string,id:number){\n        console.log(email,password,id)\n        return \"logged in sucessfully\"\n    }\n    public isAuth(id:number){\n        return {status:true,id:id}\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionDto.html":{"url":"classes/CreateMetaOptionDto.html","title":"class - CreateMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/dtos/create-metaoptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                metaValue\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'metavalue sholud be valid json', example: '{\"keyMetaOptionDTo\": \"value\"}'})@IsString()@IsNotEmpty()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/dtos/create-metaoptions.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsString } from \"class-validator\";\nexport class CreateMetaOptionDto{\n    @ApiProperty({description:\"metavalue sholud be valid json\",example: \"{\\\"keyMetaOptionDTo\\\": \\\"value\\\"}\"})\n    @IsString()\n    @IsNotEmpty()\n    @IsJSON()\n    metaValue:string;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authorId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                feautredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'ineger', required: true, example: 1})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'content means writing/ words', example: 'this is a exapmle paragraph of content of post'})@IsString({message: 'content should of type string'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        feautredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'url of image which is to e displayed in this post', example: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTvIk0nTT-VhxRW8wgWHbzQ-6KPKvSt33DcHQ&s'})@IsUrl()@IsOptional()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionDto | null\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'object', properties: undefined})@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Post type should be string and is enum', example: 'page'})@IsNotEmpty({message: 'Please provide title of post'})@IsEnum(postType, {message: 'Post type should be one of 'post', 'page', 'story', 'series''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'Date on which post will be published', example: '2024-09-30T12:30:00Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'schema should be a valid json', example: '{\"keySchemaPostDto\": \"value\"}'})@IsString({message: 'schema should of type string'})@IsOptional()@IsJSON({message: 'schema should be a valid JSON'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'string having small letters and - should be used instead of space ', example: 'my-first-post'})@IsNotEmpty({message: 'Please provide slug of post'})@IsString({message: 'slug should of type string'})@MaxLength(512)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'slug should be small letters and uses only \"-\" without spaces forexample \"my-url\" '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: status, description: 'provide status of post like draft, sehduled etc', example: 'review'})@IsNotEmpty({message: 'Please provide status of post like draft, sehduled etc'})@IsEnum(status, {message: 'Post type should be one of 'draft', 'scheduled', 'review', 'published''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({required: false, description: 'An array of ids of tags associated with the post. Each tag should be a number representing tag id', example: undefined})@ApiPropertyOptional({description: 'Array of ids of tags passed as integers in an array', example: undefined})@IsOptional()@IsArray()@IsInt({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Title should of type string', example: 'this is example'})@IsNotEmpty({message: 'Please provide title of post'})@IsString({message: 'Title should of type string'})@MaxLength(512)@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { ArrayMinSize, ArrayNotEmpty, IsArray, IsDate, IsEnum, IsIn, IsInt, IsISO8601, IsJSON, IsNotEmpty, IsObject, IsOptional, IsString, IsUrl, Matches, MaxLength, maxLength, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { status } from \"../enums/status.enum\";\nimport { CreateMetaOptionDto } from \"../../meta-options/dtos/create-metaoptions.dto\";\nimport { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nexport class CreatePostDto{\n    @ApiProperty({description:\"Title should of type string\",example:\"this is example\"})\n    @IsNotEmpty({message:\"Please provide title of post\"})\n    @IsString({message:\"Title should of type string\"})\n    @MaxLength(512)\n    @MinLength(4)\n    title:string;\n\n    @ApiProperty({enum:postType,description:\"Post type should be string and is enum\",example:\"page\"})\n    @IsNotEmpty({message:\"Please provide title of post\"})\n    @IsEnum(postType, { message: \"Post type should be one of 'post', 'page', 'story', 'series'\" })\n    postType:postType;\n\n    @ApiProperty({description:\"string having small letters and - should be used instead of space \",example:\"my-first-post\"})\n    @IsNotEmpty({message:\"Please provide slug of post\"})\n    @IsString({message:\"slug should of type string\"})\n    @MaxLength(512)\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/,{message:'slug should be small letters and uses only \"-\" without spaces forexample \"my-url\" '})\n    slug:string;\n\n    @ApiProperty({enum:status,description:\"provide status of post like draft, sehduled etc\",example:\"review\"})\n    @IsNotEmpty({message:\"Please provide status of post like draft, sehduled etc\"})\n    @IsEnum(status, { message: \"Post type should be one of 'draft', 'scheduled', 'review', 'published'\" })\n    status:status;\n\n    @ApiProperty({required: false,description:\"content means writing/ words\",example:\"this is a exapmle paragraph of content of post\"})\n    @IsString({message:\"content should of type string\"})\n    @IsOptional()\n    content?:string;\n\n    @ApiProperty({required: false,description:\"schema should be a valid json\",example:\"{\\\"keySchemaPostDto\\\": \\\"value\\\"}\"})\n    @IsString({message:\"schema should of type string\"})\n    @IsOptional()\n    @IsJSON({message:\"schema should be a valid JSON\"})\n    schema?:string;\n\n    @ApiProperty({required: false,description:\"url of image which is to e displayed in this post\",example:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTvIk0nTT-VhxRW8wgWHbzQ-6KPKvSt33DcHQ&s\"})\n    @IsUrl()\n    @IsOptional()\n    @MaxLength(1024)\n    feautredImageUrl?:string;\n\n    @ApiProperty({required: false,description: \"Date on which post will be published\",example: \"2024-09-30T12:30:00Z\"  })\n      @IsISO8601()\n      @IsOptional()\n      publishedOn?: Date;\n\n@ApiPropertyOptional({\n    required: false,\n    description: \"An array of ids of tags associated with the post. Each tag should be a number representing tag id\",\n    example: [1, 2]  \n  })\n\n  \n  @ApiPropertyOptional({\n    description: 'Array of ids of tags passed as integers in an array',\n    example: [1, 2],\n  })\n  @IsOptional()\n  @IsArray()\n  @IsInt({ each: true })\n  tags?: number[];\n  \n  @ApiPropertyOptional({\n    type: 'object',\n      properties: {\n        metaValue: {\n          type: 'json',\n          description: 'The metaValue is a JSON string',\n          example:  '\\\"{\\\"sidebarOpened\\\": true}\\\"'\n        },\n      },\n  })\n  @IsOptional()\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionDto)\n  metaOptions?: CreateMetaOptionDto | null;\n\n  @ApiProperty({type:\"ineger\",required:true,example:1})\n  @IsNotEmpty()\n  @IsInt()\n  authorId:number;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/dtos/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImage\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'should be a valid url', example: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTvIk0nTT-VhxRW8wgWHbzQ-6KPKvSt33DcHQ&s'})@IsOptional()@IsUrl()@MaxLength(1024)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()@IsString()@MaxLength(256)@MinLength(3)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'sschema should be valid json string', example: '{\"tagSchemaPost\": \"value\"}'})@IsJSON()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'string having small letters and - should be used instead of space ', example: 'my-first-post'})@IsNotEmpty({message: 'Please provide slug of post'})@IsString({message: 'slug should of type string'})@MaxLength(256)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'slug should be small letters and uses only \"-\" without spaces forexample \"my-url\" '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/dtos/create-tag.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { IsJSON, IsNotEmpty, IsOptional, IsString, IsUrl, isURL, Matches, MaxLength, MinLength } from \"class-validator\";\n\nexport class CreateTagDto{\n    @ApiProperty()\n    @IsNotEmpty()\n    @IsString()\n    @MaxLength(256)\n    @MinLength(3)\n    name:string;\n\n    @ApiProperty({description:\"string having small letters and - should be used instead of space \",example:\"my-first-post\"})\n    @IsNotEmpty({message:\"Please provide slug of post\"})\n    @IsString({message:\"slug should of type string\"})\n    @MaxLength(256)\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/,{message:'slug should be small letters and uses only \"-\" without spaces forexample \"my-url\" '})\n    slug:string;\n\n    @ApiPropertyOptional()\n    @IsString()\n    @IsOptional()\n    description?:string;\n\n    @ApiPropertyOptional({description:\"sschema should be valid json string\",example:\"{\\\"tagSchemaPost\\\": \\\"value\\\"}\",})\n    @IsJSON()\n    @IsOptional()\n    schema?:string;\n\n    @ApiPropertyOptional({description:\"should be a valid url\",example:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTvIk0nTT-VhxRW8wgWHbzQ-6KPKvSt33DcHQ&s\",})\n    @IsOptional()\n    @IsUrl()\n    @MaxLength(1024)\n    featuredImage?:string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDtO.html":{"url":"classes/CreateUserDtO.html","title":"class - CreateUserDtO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDtO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'email should be valid email address and should of type string', example: 'JohnBhai@gmail.com', required: true})@IsNotEmpty({message: 'email can not empty'})@IsEmail()@MaxLength(96, {message: 'email can not exceed 96 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'name should be minimum of 3 character and maximum of 30 character and should of type string', example: 'JohnBhai', required: true})@IsNotEmpty({message: 'Name should not be empty'})@IsString({message: 'name should be of type string'})@MinLength(3, {message: 'Min 3 character are required for name'})@MaxLength(30, {message: 'name can not exceed 30 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password should be minimun 8 character and max 96 ,contains atleast one upper casse, one special character, one digit and should of type string', example: 'John@123', required: true})@IsNotEmpty({message: 'Password should not be empty'})@IsString()@MinLength(8, {message: 'Paswword should be 8 chracter'})@MaxLength(96, {message: 'password can not exceed 96 characters'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$@!%&*?])[A-Za-z\\d#$@!%&*?]{8,30}$/, {message: 'password should contain atleast one upper casse, one special character, one digit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsNotEmpty, IsString ,IsEmail, MinLength, MaxLength, Matches} from \"class-validator\";\n\n\nexport class CreateUserDtO {\n    @ApiProperty({description:\"name should be minimum of 3 character and maximum of 30 character and should of type string\",example:\"JohnBhai\",required:true})\n    @IsNotEmpty({message:\"Name should not be empty\"})\n    @IsString({message:\"name should be of type string\"})\n    @MinLength(3,{message:\"Min 3 character are required for name\"})\n    @MaxLength(30,{message:\"name can not exceed 30 characters\"})\n    name:string;\n\n    @ApiProperty({description:\"email should be valid email address and should of type string\",example:\"JohnBhai@gmail.com\",required:true})\n    @IsNotEmpty({message:\"email can not empty\"})\n    @IsEmail()\n    @MaxLength(96,{message:\"email can not exceed 96 characters\"})\n    email:string;\n\n    @ApiProperty({description:\"Password should be minimun 8 character and max 96 ,contains atleast one upper casse, one special character, one digit and should of type string\",example:\"John@123\",required:true})\n    @IsNotEmpty({message:\"Password should not be empty\"})\n    @IsString()\n    @MinLength(8,{message:\"Paswword should be 8 chracter\"})\n    @MaxLength(96,{message:\"password can not exceed 96 characters\"})\n    @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$@!%&*?])[A-Za-z\\d#$@!%&*?]{8,30}$/,{message:\"password should contain atleast one upper casse, one special character, one digit\"})\n    password:string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostParamDto.html":{"url":"classes/GetPostParamDto.html","title":"class - GetPostParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/getPostParams,dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/getPostParams,dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class GetPostParamDto{\n    @IsNotEmpty()\n    @Type(()=>Number)\n    id?:number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamsDto.html":{"url":"classes/GetUserParamsDto.html","title":"class - GetUserParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user by id', example: 12345})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-params.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {  IsInt, IsNumber, IsOptional } from \"class-validator\";\nexport class GetUserParamsDto{\n    @ApiPropertyOptional({description:\"Get user by id\",example:12345})\n    @IsOptional()\n    @IsInt()\n    @Type(()=>Number)\n    id?:number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAuthDto.html":{"url":"classes/LoginAuthDto.html","title":"class - LoginAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.auth.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.auth.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.auth.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class LoginAuthDto{\n    @IsNotEmpty()\n    @Type(()=>Number)\n    id:number\n\n    @IsNotEmpty()\n   @IsEmail()\n    email:string\n\n    @IsNotEmpty()\n    @IsString()\n    password:string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/MetaOption.html":{"url":"entities/MetaOption.html","title":"entity - MetaOption","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  MetaOption\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                metaValue\n                            \n                            \n                                    \n                                    \n                                post\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        metaValue\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json', nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        post\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, post => post.metaOptions, {onDelete: 'CASCADE'})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/meta-options/meta-options.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class MetaOption{\n    @PrimaryGeneratedColumn()\n    id:number;\n\n    @Column({\n        type:\"json\",\n        nullable:false\n    })\n    metaValue:string;\n\n    @CreateDateColumn()\n    createdDate:Date;\n\n    @UpdateDateColumn()\n    updateDate:Date;\n\n    @OneToOne(()=>Post,(post)=>post.metaOptions,{onDelete:'CASCADE'})\n    @JoinColumn()\n    post:Post;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MetaOptionService.html":{"url":"injectables/MetaOptionService.html","title":"injectable - MetaOptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MetaOptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/providers/metaOption.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(metaOptionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/meta-options/providers/metaOption.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createMetaOptionDto: CreateMetaOptionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/meta-options/providers/metaOption.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreateMetaOptionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { CreateMetaOptionDto } from \"../dtos/create-metaoptions.dto\";\nimport { Repository } from \"typeorm\";\nimport { MetaOption } from \"../meta-options.entity\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\n\n@Injectable()\nexport class MetaOptionService{\n    constructor(\n        /**\n         * inject meta option prpperty\n         */\n        @InjectRepository(MetaOption)\n        private readonly metaOptionRepository:Repository\n    ){}\n    public async create(createMetaOptionDto:CreateMetaOptionDto){\n        let meatOption= this.metaOptionRepository.create(createMetaOptionDto)\n        return await this.metaOptionRepository.save(meatOption)\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MetaOptionsController.html":{"url":"controllers/MetaOptionsController.html","title":"controller - MetaOptionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MetaOptionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/meta-options/meta-options.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                meta-options\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createMetaOption\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createMetaOption\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMetaOption(createMetaOptionDto: CreateMetaOptionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'creates new meta option for a specific post'})@ApiResponse({status: 201, description: 'you get a response of 201 if your metaoption are created'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/meta-options/meta-options.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createMetaOptionDto\n                                            \n                                                            CreateMetaOptionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { MetaOptionService } from './providers/metaOption.service';\nimport { CreateMetaOptionDto } from './dtos/create-metaoptions.dto';\n\n@Controller('meta-options')\n@ApiTags('meta option')\nexport class MetaOptionsController {\n    constructor(private readonly meatOptionService:MetaOptionService){}\n   @ApiOperation({summary:\"creates new meta option for a specific post\"})\n   @ApiResponse({status:201,description:\"you get a response of 201 if your metaoption are created\"})\n    @Post()\n    public createMetaOption(@Body() createMetaOptionDto:CreateMetaOptionDto){\n        return this.meatOptionService.create(createMetaOptionDto)\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetaOptionsModule.html":{"url":"modules/MetaOptionsModule.html","title":"module - MetaOptionsModule","body":"\n                   \n\n\n\n\n    Modules\n    MetaOptionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\n\nMetaOptionService\n\nMetaOptionService\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\nMetaOptionsModule -->\n\nMetaOptionService->MetaOptionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/meta-options/meta-options.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MetaOptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MetaOptionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MetaOptionsController } from './meta-options.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { MetaOption } from './meta-options.entity';\nimport { MetaOptionService } from './providers/metaOption.service';\n\n@Module({\n  controllers: [MetaOptionsController],\n  providers:[MetaOptionService],\n  imports:[TypeOrmModule.forFeature([MetaOption])]\n})\nexport class MetaOptionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'the id post which need to be updated'})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto){\n    @ApiProperty({description:\"the id post which need to be updated\"})\n    @IsNotEmpty()\n    @IsInt()\n    id:number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                author\n                            \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                feautredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        author\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.posts, {eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        feautredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', nullable: true, length: 1024})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MetaOption\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, metaOption => metaOption.post, {cascade: true, eager: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: status, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tag[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, tag => tag.posts, {eager: true})@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/post.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, JoinColumn, JoinTable, ManyToMany, ManyToOne, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { postType } from './enums/postType.enum';\nimport { status } from './enums/status.enum';\nimport { CreateMetaOptionDto } from 'src/meta-options/dtos/create-metaoptions.dto';\nimport { MetaOption } from 'src/meta-options/meta-options.entity';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\n\n@Entity()\nexport class Post {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n  })\n  title: string;\n\n  @Column({\n    type: 'enum',\n    enum:postType,\n    nullable: false,\n    default:postType.POST\n  })\n  postType: postType;\n\n  @Column({\n    type: 'varchar',\n    length: 512,\n    nullable: false,\n    unique:true\n  })\n  slug: string;\n\n  @Column({\n    type: 'enum',\n    enum:status,\n    nullable: false,\n    default:status.DRAFT\n  })\n  status: status;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  content?: string;\n\n  @Column({\n    type: 'text',\n    nullable: true,\n  })\n  schema?: string;\n\n  @Column({\n    type: 'varchar',\n    nullable: true,\n    length:1024\n  })\n  feautredImageUrl?: string;\n\n  @Column({\n    type: 'timestamp',\n    nullable: true,\n  })\n  publishedOn?: Date;\n\n  @OneToOne(()=>MetaOption,(metaOption)=>metaOption.post,{cascade:true,eager:true})\n  // @OneToOne(()=>MetaOption,{cascade:['remove','insert']})\n  metaOptions?:MetaOption;\n  \n  @ManyToOne(()=>User, (user)=>user.posts,{eager:true})\n  author:User;\n\n\n  @ManyToMany(() => Tag, (tag) => tag.posts, { eager: true,})\n  @JoinTable()\n  tags?: Tag[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                deletePost\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'creates a new post'})@ApiResponse({status: 201, description: 'you get a response of 201 if your post is created'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        deletePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    deletePost(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'delete a post and its related metaoption'})@ApiResponse({status: 200, description: 'you get a response of 200 if your post is deleted'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Find posts by user ID'})@ApiParam({name: 'userId', required: true, description: 'ID of the user to fetch posts for', type: 'string'})@ApiResponse({status: 200, description: 'Returns an array of posts for the specified user'})@ApiResponse({status: 404, description: 'User not found'})@Get('/:userId')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'update a post'})@ApiResponse({status: 200, description: 'you get a response of 200 if your post is updated'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post,Body, Patch, Delete, Query, ParseIntPipe } from '@nestjs/common';\nimport { PostService } from './providers/post.service';\nimport { GetPostParamDto } from './dtos/getPostParams,dto';\nimport { ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('post')\n@ApiTags(\"Post\")\nexport class PostController {\n   constructor(\n      /**\n      *  Injecting Posts Service\n      */\n      private readonly postService:PostService){}\n\n\n      @ApiOperation({ summary: 'Find posts by user ID' })\n      @ApiParam({\n         name: 'userId',\n         required: true,\n         description: 'ID of the user to fetch posts for',\n         type: 'string',\n       })\n      @ApiResponse({ status: 200, description: 'Returns an array of posts for the specified user' })\n      @ApiResponse({ status: 404, description: 'User not found' })\n      @Get('/:userId')\n      public getPosts(@Param('userId') userId: string) {\n        return this.postService.findAll(userId);\n      }\n    \n\n   @ApiOperation({summary:\"creates a new post\"})\n   @ApiResponse({status:201,description:\"you get a response of 201 if your post is created\"})\n   @Post()\n   public createPost(@Body() createPostDto:CreatePostDto){\n      return this.postService.create(createPostDto)\n   }\n\n   \n   @ApiOperation({summary:\"update a post\"})\n   @ApiResponse({status:200,description:\"you get a response of 200 if your post is updated\"})\n   @Patch()\n   public updatePost(@Body() patchPostDto: PatchPostDto){\n      return this.postService.update(patchPostDto)\n   }\n\n   @ApiOperation({summary:\"delete a post and its related metaoption\"})\n   @ApiResponse({status:200,description:\"you get a response of 200 if your post is deleted\"})\n   @Delete()\n   public deletePost(@Query('id', ParseIntPipe) id:number){\n      return this.postService.delete(id)\n   }\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nMetaOptionsModule->PostModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MetaOptionsModule\n                        \n                        \n                            TagsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './providers/post.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\nimport { MetaOption } from 'src/meta-options/meta-options.entity';\nimport { MetaOptionsModule } from 'src/meta-options/meta-options.module';\nimport { User } from 'src/users/user.entity';\nimport { Tag } from 'src/tags/tag.entity';\nimport { TagsModule } from 'src/tags/tags.module';\n\n@Module({\n  controllers: [PostController],\n  providers:[PostService],\n  imports:[UsersModule,TagsModule,TypeOrmModule.forFeature([Post,MetaOption,User]), MetaOptionsModule,]\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/providers/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findAll\n                            \n                            \n                                    Public\n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, postRepository: Repository, metaOptionRepository: Repository, tagsService: TagService)\n                    \n                \n                        \n                            \n                                Defined in src/post/providers/post.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        metaOptionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tagsService\n                                                  \n                                                        \n                                                                        TagService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createPostDto: CreatePostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/providers/post.service.ts:40\n                        \n                    \n\n\n            \n                \n                        creating new post\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/providers/post.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/providers/post.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(patchPostDto: PatchPostDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/providers/post.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Body, Injectable } from \"@nestjs/common\";\nimport { UserService } from \"src/users/providers/user.services\";\nimport { CreatePostDto } from \"../dtos/create-post.dto\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Post } from \"../post.entity\";\nimport { Repository } from \"typeorm\";\nimport { MetaOption } from \"src/meta-options/meta-options.entity\";\nimport { TagService } from \"src/tags/providers/tag.service\";\nimport { PatchPostDto } from \"../dtos/patch-post.dto\";\n\n\n@Injectable()\nexport class PostService{\n\n    constructor(\n\n   private readonly userService:UserService,\n\n    /**\n     * injecting post repository\n     */\n    @InjectRepository(Post)\n        private readonly postRepository:Repository,\n        /**\n     * injecting meat option repository\n     */\n    @InjectRepository(MetaOption)\n        private readonly metaOptionRepository:Repository,\n\n        /**\n         * injecting tag service\n         */\n        private readonly tagsService: TagService\n    ){}\n    /**\n     * creating new post\n     * @param createPostDto \n     * @returns \n     */\n    public async create(createPostDto:CreatePostDto){\n        // commented below code as we are using cascade\n        // let metaOptions=createPostDto.metaOptions?this.metaOptionRepository.create(createPostDto.metaOptions):null\n        // if(metaOptions){\n        //     await this.metaOptionRepository.save(metaOptions)\n        // }\n        let user=await this.userService.findOneById(createPostDto.authorId)\n\n        let tags=await this.tagsService.findMultipleTags(createPostDto.tags)\n\n        let post=this.postRepository.create({...createPostDto,author:user,tags:tags})\n        // if(metaOptions){\n        //     post.metaOptions=metaOptions\n        // }\n        return await this.postRepository.save(post)\n    }\n    public async findAll(userId:string){\n    //  const user=this.userService.findOneById()\n    // you can use relation or eager in entity when definig relation\n     const post=await this.postRepository.find({relations:{metaOptions:true,\n        // author:true,\n        // tags:true\n    }})\n     return post\n    }\n\n    public async delete(id:number){\n        // const post=await this.postRepository.findOneBy({id})\n        await this.postRepository.delete(id)\n        // let inversePost=await this.metaOptionRepository.find({\n        //     where:{id:post.metaOptions.id,},\n        //     relations:{post:true}\n        // })\n        // await this.metaOptionRepository.delete(post.metaOptions.id)\n        // await this.metaOptionRepository.delete(id)\n        return {deleted:true,id:id}\n    }\n\n    public async update(patchPostDto:PatchPostDto){\n        let tags=await this.tagsService.findMultipleTags(patchPostDto.tags)\n\n        let post =await this.postRepository.findOneBy({id:patchPostDto.id})\n\n        post.title=patchPostDto.title??post.title;\n        post.postType=patchPostDto.postType??post.postType;\n        post.slug=patchPostDto.slug??post.slug;\n        post.status=patchPostDto.status??post.status;\n        post.content=patchPostDto.content??post.content;\n        post.schema=patchPostDto.schema??post.schema;\n        post.feautredImageUrl=patchPostDto.feautredImageUrl??post.feautredImageUrl;\n        post.publishedOn=patchPostDto.publishedOn??post.publishedOn;\n        post.tags=tags;\n\n        return await this.postRepository.save(post)\n\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Tag.html":{"url":"entities/Tag.html","title":"entity - Tag","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tag.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDate\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImage\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                posts\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updateDate\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, post => post.tags, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:54\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updateDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tags/tag.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, CreateDateColumn, DeleteDateColumn, Entity, ManyToMany, ManyToOne, PrimaryGeneratedColumn, UpdateDateColumn } from \"typeorm\";\n\n@Entity()\nexport class Tag{\n    @PrimaryGeneratedColumn()\n    id:number;\n\n    @Column({\n        type:\"varchar\",\n        length:256,\n        nullable:false,\n        unique:true\n    })\n    name:string;\n\n    @Column({\n        type:\"varchar\",\n        length:256,\n        nullable:false,\n        unique:true\n    })\n    slug:string;\n\n    @Column({\n        type:\"text\",\n        nullable:true,\n    })\n    description?:string;\n\n    @Column({\n        type:\"text\",\n        nullable:true,\n    })\n    schema?:string;\n\n    @Column({\n        type:\"varchar\",\n        length:1024,\n        nullable:true,\n    })\n    featuredImage?:string;\n\n    @CreateDateColumn()\n    createDate:Date;\n\n    @UpdateDateColumn()\n    updateDate:Date;\n\n    @DeleteDateColumn()\n    deletedAt:Date\n\n    @ManyToMany(() => Post, (post) => post.tags, {onDelete: 'CASCADE'})\n      posts: Post[];\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/providers/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                create\n                            \n                            \n                                    Public\n                                    Async\n                                delete\n                            \n                            \n                                    Public\n                                    Async\n                                findMultipleTags\n                            \n                            \n                                    Public\n                                    Async\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(tagRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/tags/providers/tag.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        tagRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tag.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tag.service.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findMultipleTags\n                        \n                    \n                \n            \n            \n                \n                        \n                    findMultipleTags(tags: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tag.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tags\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tags/providers/tag.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Tag } from \"../tag.entity\";\nimport { In, Repository } from \"typeorm\";\nimport { CreateTagDto } from \"../dtos/create-tag.dto\";\n\n@Injectable()\nexport class TagService{\n    constructor(\n        /**\n         * inject tag prpperty\n         */\n        @InjectRepository(Tag)\n        private readonly tagRepository:Repository\n    ){}\n\n    public async create(createTagDto:CreateTagDto){\n        let tag=this.tagRepository.create(createTagDto)\n        return await this.tagRepository.save(tag)\n    }\n\n    public async findMultipleTags(tags:number[]){\n        let results=await this.tagRepository.find({\n            where:{\n                id:In(tags)\n            }\n        })\n        return results\n    }\n\n    public async delete(id:number){\n        await this.tagRepository.delete(id)\n        return{\n            deleted:true,\n            id\n        }\n    }\n\n    public async softDelete(id:number){\n        await this.tagRepository.softDelete(id)\n        return{\n            softDeleted:true,\n            id\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagsController.html":{"url":"controllers/TagsController.html","title":"controller - TagsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tags/tags.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tags\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createTag\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                delete\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                softDelete\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createTag\n                        \n                    \n                \n            \n            \n                \n                        \n                    createTag(createtag: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'creates new tag for a specific post'})@ApiResponse({status: 201, description: 'you get a response of 201 if your tags are created'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createtag\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'deletes tag and removes post relation also'})@ApiResponse({status: 201, description: 'you get a response of 201 if your tags are deleted'})@Delete()\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        softDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    softDelete(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'soft deletes tag and removes post relation also'})@ApiResponse({status: 201, description: 'you get a response of 201 if your tags are soft deleted'})@Delete('soft-delete')\n                \n            \n\n                    \n                        \n                            Defined in src/tags/tags.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Delete, ParseIntPipe, Post, Query } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreateTagDto } from './dtos/create-tag.dto';\nimport { TagService } from './providers/tag.service';\n\n@Controller('tags')\n@ApiTags('tags')\nexport class TagsController {\n    constructor(private readonly tagService:TagService){}\n\n    @ApiOperation({summary:\"creates new tag for a specific post\"})\n    @ApiResponse({status:201,description:\"you get a response of 201 if your tags are created\"})\n    @Post()\n    public createTag(@Body() createtag:CreateTagDto){\n        return this.tagService.create(createtag)\n    }\n\n    @ApiOperation({summary:\"deletes tag and removes post relation also\"})\n    @ApiResponse({status:201,description:\"you get a response of 201 if your tags are deleted\"})\n    @Delete()\n    public delete(@Query('id',ParseIntPipe)id:number){\n        return this.tagService.delete(id)\n\n    }\n\n    @ApiOperation({summary:\"soft deletes tag and removes post relation also\"})\n    @ApiResponse({status:201,description:\"you get a response of 201 if your tags are soft deleted\"})\n    @Delete('soft-delete')\n    public softDelete(@Query('id',ParseIntPipe)id:number){\n        return this.tagService.softDelete(id)\n\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagsModule.html":{"url":"modules/TagsModule.html","title":"module - TagsModule","body":"\n                   \n\n\n\n\n    Modules\n    TagsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\n\nTagService \n\nTagService \n\n\n\nTagsModule\n\nTagsModule\n\nTagService  -->\n\nTagsModule->TagService \n\n\n\n\n\nTagService\n\nTagService\n\nTagsModule -->\n\nTagService->TagsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tags/tags.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TagService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagsController } from './tags.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Tag } from './tag.entity';\nimport { TagService } from './providers/tag.service';\n\n@Module({\n  controllers: [TagsController],\n  providers:[TagService],\n  imports:[TypeOrmModule.forFeature([Tag])],\n  exports:[TagService]\n})\nexport class TagsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDtO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDtO } from \"./create-user.dto\";\nexport class UpdateUserDto extends PartialType(CreateUserDtO){}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                posts\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        posts\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Post[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, post => post.author)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Post } from \"src/post/post.entity\";\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User{\n    @PrimaryGeneratedColumn()\n    id:number;\n\n    @Column({\n        type:\"varchar\",\n        length:30,\n        nullable:false\n    })\n    name:string;\n\n\n    @Column({\n        type:\"varchar\",\n        length:96,\n        nullable:false,\n        unique:true\n    })\n    email:string;\n\n    @Column({\n        type:\"varchar\",\n        length:96,\n        nullable:false\n    })\n    password:string;\n\n    @OneToMany(()=>Post,(post)=>post.author)\n    posts:Post[]\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.services.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that handles operations related to Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                findOneById\n                            \n                            \n                                    Public\n                                getAllUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.services.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDtO)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.services.ts:40\n                        \n                    \n\n\n            \n                \n                        create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDtO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.services.ts:99\n                        \n                    \n\n\n            \n                \n                        getting single user by using user unique id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.services.ts:82\n                        \n                    \n\n\n            \n                \n                        Fetches all users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for getting users.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nMaximum number of users to fetch.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, forwardRef, Inject, Injectable, RequestTimeoutException } from \"@nestjs/common\";\nimport { GetUserParamsDto } from \"../dtos/get-user-params.dto\";\nimport { AuthService } from \"src/auth/providers/auth.service\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { User } from \"../user.entity\";\nimport { Repository } from \"typeorm\";\nimport { CreateUserDtO } from \"../dtos/create-user.dto\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TimeoutError } from \"rxjs\";\n\n    /**\n     * Service that handles operations related to Users.\n     */\n\n@Injectable()\nexport class UserService{\n\n\n    constructor(\n            /**\n     * injecting user repository\n     * @param userRepository \n     */\n\n        @InjectRepository(User)\n        private userRepository:Repository,\n    /**\n     * injecting config service\n     * @param userRepository \n     */\n\n    private readonly configService:ConfigService,\n\n){}\n\n/**\n * create a new user\n * @param createUserDto \n */\npublic async createUser(createUserDto:CreateUserDtO){\n    let existingUser=undefined\n\n    try{\n        existingUser=await this.userRepository.findOne({\n            where:{email:createUserDto.email}\n            })\n    }catch(err){\n        throw new RequestTimeoutException(\n            ['unable to process your request, try again later'],\n            {\n                description:`Something went wrong. errorCode [usrcrte1] ${err}`\n            }\n        )\n    }\n\n    /**\n     * already registered email exception\n     */\n    if(existingUser){\n        throw new BadRequestException(['This email is already registered. please login using that email'])\n    }\n\n    let newUser= this.userRepository.create(createUserDto)\n    try{\n        newUser=await this.userRepository.save(newUser)\n    }catch(err){\n        throw new RequestTimeoutException(['unable to process this request, please try again later'],{\n            description:`something went wrong, errorCode [usrcrte2] ${err}`,\n            \n        })\n    }\n    \n     return newUser\n}\n   /**\n     * Fetches all users.\n     * @param getUserParamsDto - Parameters for getting users.\n     * @param limit - Maximum number of users to fetch.\n     * @param page - Page number for pagination.\n     * @returns A list of users.\n     */\n    public getAllUsers(getUserParamsDto:GetUserParamsDto,limit:number,page:number){\n\n        const environment=this.configService.get('URLD')\n        console.log(environment,\"environment\")\n\n        return[\n            {name:\"waqar\",\n             email:\"waqar@wa.com\"\n            },\n            {name:\"wiqi\",\n                email:\"wiqir@wa.com\"\n            },\n        ]\n    }\n    /**\n     * getting single user by using user unique id \n     */\n    public async findOneById(id:number){\n        let user=undefined;\n        try{\n             user=await this.userRepository.findOneBy({id})\n        }catch(err){\n            throw new RequestTimeoutException(['unable to process this request, please try again later'],{\n                description:`something went wrong, errorCode [usrfnde1] ${err}`,\n                \n            })\n        }\n    /**\n     * user not registered email exception\n     */\n        if(user){\n            return user\n        }else{\n            throw new BadRequestException('The request user is not registered.')\n        }\n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                getUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                updateUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDtO: CreateUserDtO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'creates a new user '})@ApiResponse({status: 200, description: 'user created sucessfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDtO\n                                            \n                                                            CreateUserDtO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/user/:id')@ApiOperation({summary: 'fetches user on base of id'})@ApiResponse({status: 200, description: 'user fetched sucessfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'fetches user on base of id and queries'})@ApiResponse({status: 200, description: 'user fetched sucessfully'})@ApiQuery({name: 'limit', type: 'number', required: false, example: 12, description: 'number of entries return for queries'})@ApiQuery({name: 'page', type: 'number', required: false, example: 123, description: 'number of pages return for queries'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUsers(updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller,Get,Post,Param,Query, Body ,ParseIntPipe,DefaultValuePipe,ValidationPipe, Patch} from '@nestjs/common';\nimport { CreateUserDtO } from './dtos/create-user.dto';\nimport { GetUserParamsDto} from './dtos/get-user-params.dto';\nimport { UpdateUserDto } from './dtos/update-user.dto';\nimport { UserService } from './providers/user.services';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n\n    constructor(private readonly userService:UserService){}\n    @Get('/:id?')\n    @ApiOperation({summary:\"fetches user on base of id and queries\"})\n    @ApiResponse({status:200,description:\"user fetched sucessfully\"})\n    @ApiQuery({name:\"limit\",type:\"number\",required:false,example:12,description:\"number of entries return for queries\"})\n    @ApiQuery({name:\"page\",type:\"number\",required:false,example:123,description:\"number of pages return for queries\"})\n    public getUsers(@Param() getUserParamsDto:GetUserParamsDto, @Query('limit',new DefaultValuePipe(10),ParseIntPipe) limit:number,@Query('page',ParseIntPipe) page:number){\n        return this.userService.getAllUsers(getUserParamsDto,limit,page)\n    }\n\n    @Get('/user/:id')\n    @ApiOperation({summary:\"fetches user on base of id\"})\n    @ApiResponse({status:200,description:\"user fetched sucessfully\"})\n    public getUser(@Param('id',ParseIntPipe) id:number){\n        return this.userService.findOneById(id)\n    }\n\n\n    @Post()\n    @ApiOperation({summary:\"creates a new user \"})\n    @ApiResponse({status:200,description:\"user created sucessfully\"})\n    public createUsers(@Body() createUserDtO:CreateUserDtO){\n        return this.userService.createUser(createUserDtO)\n    }\n    @Patch()\n    public updateUsers(@Body() updateUserDto:UpdateUserDto){\n        console.log(updateUserDto,\"body\")\n        return \"create user api was request\"\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.services';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers:[UserService],\n  exports:[UserService],\n  imports:[TypeOrmModule.forFeature([User])]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.module.ts\n            \n            variable\n            envPath\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.auth.dto.ts\n            \n            class\n            LoginAuthDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/dtos/create-metaoptions.dto.ts\n            \n            class\n            CreateMetaOptionDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.controller.ts\n            \n            controller\n            MetaOptionsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/meta-options/meta-options.entity.ts\n            \n            entity\n            MetaOption\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/meta-options/providers/metaOption.service.ts\n            \n            injectable\n            MetaOptionService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/post/dtos/getPostParams,dto.ts\n            \n            class\n            GetPostParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/post/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/providers/post.service.ts\n            \n            injectable\n            PostService\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/tags/dtos/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/providers/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tags/tag.entity.ts\n            \n            entity\n            Tag\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tags/tags.controller.ts\n            \n            controller\n            TagsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDtO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-params.dto.ts\n            \n            class\n            GetUserParamsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.services.ts\n            \n            injectable\n            UserService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            status   (src/.../status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/post/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetaOptionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_MetaOptionsModule\n\n\n\ncluster_MetaOptionsModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_TagsModule\n\n\n\ncluster_TagsModule_exports\n\n\n\ncluster_TagsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nMetaOptionsModule\n\nMetaOptionsModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nMetaOptionsModule->PostModule\n\n\n\nAppModule -->\n\nMetaOptionsModule->AppModule\n\n\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nTagsModule\n\nTagsModule\n\nPostModule -->\n\nTagsModule->PostModule\n\n\n\nAppModule -->\n\nTagsModule->AppModule\n\n\n\n\n\nTagService \n\nTagService \n\nTagService  -->\n\nTagsModule->TagService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nMetaOptionService\n\nMetaOptionService\n\nMetaOptionsModule -->\n\nMetaOptionService->MetaOptionsModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nTagService\n\nTagService\n\nTagsModule -->\n\nTagService->TagsModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    9 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            envPath   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        envPath\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.NODE_ENV ? `.env.${process.env.NODE_ENV}`.trim(): '.env'\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
