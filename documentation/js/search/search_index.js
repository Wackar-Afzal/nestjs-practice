var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.27,1,1.928]],["body/controllers/AppController.html",[0,2.094,1,3.18,2,1.555,3,0.483,4,0.417,5,0.417,6,3.416,7,0.592,8,0.036,9,1.066,10,2.758,11,3.416,12,0.483,13,0.067,14,2.317,15,1.885,16,0.03,17,0.03]],["title/modules/AppModule.html",[18,1.155,19,1.928]],["body/modules/AppModule.html",[1,2.914,2,1.525,3,0.344,4,0.297,5,0.297,7,0.65,8,0.036,9,0.758,10,2.734,11,2.429,12,0.344,13,0.048,16,0.024,17,0.024,18,1.746,19,3.721,20,1.34,21,1.34,22,1.648,23,1.648,24,1.34,25,2.6,26,1.648,27,2.429,28,2.429,29,2.429,30,2.734,31,3.04,32,2.473,33,2.272,34,1.648,35,1.482,36,2.936,37,3.35,38,2.936,39,2.936,40,2.936,41,1.648,42,2.936,43,2.936]],["title/injectables/AppService.html",[10,1.547,44,1.155]],["body/injectables/AppService.html",[3,0.464,4,0.4,5,0.4,7,0.464,8,0.036,9,1.022,10,2.487,12,0.464,13,0.064,16,0.029,17,0.029,44,1.856,45,2.222,46,3.276,47,0.675,48,2.249,49,5.61,50,0.926,51,3.959,52,1.808,53,2.041,54,1.808,55,3.959,56,3.959]],["title/controllers/AuthController.html",[0,1.27,41,1.72]],["body/controllers/AuthController.html",[0,1.391,2,1.265,3,0.393,4,0.339,5,0.339,7,0.618,8,0.036,9,0.867,12,0.393,13,0.054,14,1.884,15,1.533,16,0.026,17,0.026,41,2.487,47,0.572,48,2.023,50,0.786,52,1.533,54,1.533,57,2.778,58,2.396,59,3.357,60,2.504,61,4.431,62,3.357,63,3.12,64,1.151,65,4.431,66,3.357,67,1.695,68,1.533,69,0.786,70,1.265,71,3.163,72,3.357,73,1.533,74,2.778,75,3.357,76,2.396,77,1.533,78,3.357,79,3.357,80,2.778,81,3.357,82,3.357,83,3.357]],["title/modules/AuthModule.html",[18,1.155,30,1.547]],["body/modules/AuthModule.html",[2,1.249,3,0.388,4,0.335,5,0.335,7,0.615,8,0.036,9,0.855,12,0.388,13,0.054,16,0.026,17,0.026,18,1.857,20,1.513,21,1.513,22,1.86,23,1.86,24,1.513,25,2.766,26,2.466,30,2.891,32,2.006,33,2.466,34,1.86,35,1.673,41,2.466,73,2.735,74,2.742,84,2.742,85,2.742,86,2.742,87,3.314,88,2.084,89,3.314,90,2.742,91,3.314,92,3.314,93,3.314]],["title/injectables/AuthService.html",[44,1.155,73,1.399]],["body/injectables/AuthService.html",[3,0.337,4,0.291,5,0.291,7,0.468,8,0.036,9,0.744,12,0.337,13,0.047,15,1.315,16,0.023,17,0.023,44,1.505,45,1.617,47,0.491,48,1.824,50,1.073,52,1.824,53,2.156,54,1.824,60,2.718,67,2.316,68,2.094,69,1.073,70,1.728,73,1.824,88,1.812,94,2.384,95,3.995,96,3.995,97,2.852,98,2.384,99,2.052,100,2.881,101,2.881,102,2.156,103,2.881,104,2.262,105,2.057,106,2.881,107,2.881,108,2.852,109,2.881,110,1.812,111,2.384,112,2.384,113,2.881,114,2.384,115,2.057,116,2.881,117,2.881,118,2.057,119,2.881,120,2.881,121,2.384,122,2.881,123,2.881]],["title/classes/CreateMetaOptionDto.html",[13,0.05,124,1.928]],["body/classes/CreateMetaOptionDto.html",[3,0.353,4,0.305,5,0.305,7,0.353,8,0.035,12,0.353,13,0.067,16,0.024,17,0.024,47,0.514,50,0.965,53,1.947,64,1.414,69,0.965,124,2.594,125,1.136,126,3.354,127,2.496,128,1.554,129,4.709,130,3.606,131,3.016,132,4.518,133,4.518,134,4.518,135,4.518,136,4.123,137,3.412,138,5.051,139,3.606,140,3.016,141,3.016,142,1.523,143,2.315,144,1.25,145,3.016,146,4.123,147,3.016,148,3.016]],["title/classes/CreatePostDto.html",[13,0.05,149,1.72]],["body/classes/CreatePostDto.html",[3,0.115,4,0.1,5,0.1,7,0.394,8,0.035,12,0.115,13,0.037,16,0.01,17,0.01,47,0.168,50,0.977,53,2.108,64,1.431,69,1.278,70,1.572,77,0.45,105,2.865,124,1.705,125,0.371,126,3.08,128,0.855,129,1.416,130,1.222,132,2.992,133,3.321,134,3.453,135,3.57,139,1.222,142,0.497,143,0.961,144,0.408,149,0.961,150,0.703,151,3.366,152,1.711,153,2.269,154,2.54,155,2.269,156,3.069,157,3.366,158,3.616,159,3.829,160,4.173,161,3.168,162,1.933,163,1.711,164,1.711,165,0.985,166,2.714,167,1.711,168,1.711,169,2.269,170,0.985,171,0.985,172,2.269,173,1.711,174,1.711,175,1.711,176,2.886,177,0.985,178,1.711,179,1.711,180,0.985,181,0.985,182,1.711,183,1.711,184,0.985,185,0.985,186,0.985,187,3.849,188,1.711,189,0.985,190,1.711,191,0.985,192,0.985,193,2.243,194,4.013,195,0.985,196,2.243,197,1.077,198,1.416,199,1.416,200,0.985,201,2.711,202,1.878,203,1.711,204,1.711,205,0.985,206,0.985,207,2.711,208,2.269,209,0.985,210,0.985,211,0.985,212,1.416,213,1.711,214,2.711,215,2.711,216,1.711,217,1.711,218,1.711,219,1.711,220,0.985,221,0.985,222,2.711,223,2.269,224,1.711,225,1.711,226,1.711,227,1.711,228,0.985,229,2.785,230,2.711,231,1.711,232,0.985,233,0.985,234,1.416,235,1.416,236,0.985,237,1.711,238,3.366,239,2.243,240,2.243,241,1.711,242,0.985,243,3.069,244,0.815,245,1.711,246,0.985,247,0.985,248,0.985,249,0.985,250,0.553,251,0.985,252,1.711,253,2.269,254,0.985,255,0.985,256,1.711,257,0.985,258,0.985,259,2.992,260,1.711,261,0.815,262,0.815,263,1.711,264,0.985,265,0.985,266,0.62,267,0.985,268,1.878,269,0.985,270,0.985,271,2.711,272,0.985,273,0.985,274,0.985,275,0.985,276,0.985,277,0.985,278,0.985,279,0.985,280,0.985,281,0.985,282,0.985,283,0.985,284,0.985,285,0.985,286,0.985,287,0.985,288,0.985,289,0.985,290,0.985,291,0.985,292,0.985,293,0.985,294,0.985,295,0.985,296,0.985,297,0.985,298,0.985,299,0.985,300,0.985,301,0.985,302,0.985,303,0.985,304,0.985,305,1.222,306,0.985,307,0.815,308,0.985,309,0.985,310,0.985,311,0.985,312,0.985,313,0.985,314,0.985,315,0.985,316,0.815,317,0.985,318,0.985,319,0.985,320,0.985,321,0.985,322,0.985,323,0.815,324,0.985]],["title/classes/CreateUserDtO.html",[13,0.05,325,1.72]],["body/classes/CreateUserDtO.html",[3,0.302,4,0.261,5,0.261,7,0.302,8,0.034,12,0.302,13,0.06,16,0.022,17,0.022,47,0.44,50,1.011,53,1.955,64,1.482,68,2.373,69,1.169,108,3.369,110,2.719,125,0.973,128,1.394,137,3.576,139,2.641,142,1.304,143,2.076,144,1.07,187,3.905,196,4.3,239,3.061,240,3.061,244,2.137,261,2.137,262,2.137,305,2.641,323,3.576,325,2.076,326,3.905,327,1.844,328,2.582,329,2.582,330,2.582,331,2.582,332,4.719,333,2.582,334,3.699,335,3.699,336,2.582,337,2.582,338,2.582,339,3.061,340,2.582,341,3.699,342,3.699,343,3.699,344,2.582,345,3.699,346,3.699,347,3.699,348,3.699,349,3.699,350,2.582,351,3.061,352,2.582,353,2.582,354,2.582,355,2.582,356,2.582,357,2.582,358,2.582,359,2.137,360,2.582,361,2.582,362,2.582,363,2.582,364,2.582,365,2.137]],["title/classes/GetPostParamDto.html",[13,0.05,366,1.928]],["body/classes/GetPostParamDto.html",[3,0.45,4,0.388,5,0.388,7,0.566,8,0.036,12,0.45,13,0.086,16,0.028,17,0.028,47,0.655,50,0.899,64,1.317,69,1.131,70,1.821,102,1.591,104,2.207,125,1.447,128,1.821,142,2.44,143,2.156,144,1.591,250,2.156,366,3.04,367,3.178,368,3.178,369,3.841,370,2.742,371,3.178]],["title/classes/GetUserParamsDto.html",[13,0.05,372,1.72]],["body/classes/GetUserParamsDto.html",[3,0.413,4,0.356,5,0.356,7,0.595,8,0.036,12,0.413,13,0.082,16,0.027,17,0.027,47,0.601,50,0.825,64,1.209,69,1.071,70,1.724,77,1.61,102,1.461,104,2.319,125,1.328,128,1.724,144,1.461,166,2.218,250,1.979,259,3.786,370,2.517,371,2.917,372,2.568,373,3.786,374,3.018,375,2.917,376,3.525,377,3.525,378,3.525,379,3.525,380,3.786,381,3.525,382,3.525,383,3.525]],["title/classes/LoginAuthDto.html",[13,0.05,63,1.928]],["body/classes/LoginAuthDto.html",[3,0.4,4,0.345,5,0.345,7,0.525,8,0.036,12,0.4,13,0.081,16,0.026,17,0.026,47,0.583,50,1.171,53,1.857,63,2.82,64,1.716,69,1.243,102,1.415,104,2.047,108,3.2,110,2.82,125,1.287,128,1.689,142,2.682,143,2.516,144,1.415,250,1.918,351,3.709,359,2.827,365,2.827,368,2.827,370,2.439,384,2.827,385,3.416,386,3.416,387,3.416,388,3.416,389,3.416,390,2.827]],["title/classes/PatchPostDto.html",[13,0.05,391,1.928]],["body/classes/PatchPostDto.html",[3,0.411,4,0.355,5,0.355,7,0.594,8,0.035,12,0.411,13,0.074,16,0.027,17,0.027,47,0.598,50,0.821,64,1.204,69,0.821,77,1.602,102,1.454,104,2.45,125,1.322,128,1.719,142,2.303,144,1.454,149,1.97,150,2.505,176,2.561,212,2.904,266,2.208,268,2.904,380,3.775,390,2.904,391,2.87,392,3.775,393,3.775,394,4.562,395,3.775,396,3.509,397,3.509,398,2.904,399,2.904,400,3.509,401,2.904]],["title/controllers/PostController.html",[0,1.27,402,1.928]],["body/controllers/PostController.html",[0,0.961,2,0.874,3,0.272,4,0.234,5,0.234,7,0.586,8,0.036,9,0.599,12,0.272,13,0.038,14,1.302,15,1.059,16,0.02,17,0.02,47,0.395,48,1.562,50,0.951,52,1.856,54,1.059,58,1.655,60,2.739,64,1.394,67,2.052,68,1.856,69,0.951,70,1.531,71,1.655,76,1.655,77,1.059,149,2.518,162,1.727,176,2.983,366,3.149,391,3.149,399,2.83,401,1.919,402,2.152,403,1.919,404,3.42,405,3.42,406,3.42,407,2.319,408,3.42,409,2.319,410,2.83,411,3.42,412,4.064,413,4.486,414,2.319,415,2.319,416,3.42,417,2.319,418,2.83,419,2.319,420,2.319,421,2.319,422,3.363,423,2.319,424,2.319,425,2.319,426,2.83,427,1.171,428,1.919,429,2.319,430,1.919,431,1.919,432,1.919,433,2.319,434,2.319,435,2.319,436,2.319,437,2.319,438,2.319,439,2.319,440,2.319,441,2.319,442,2.319,443,2.319,444,2.319,445,2.319,446,2.319,447,2.319,448,2.319]],["title/modules/PostModule.html",[18,1.155,31,1.72]],["body/modules/PostModule.html",[2,1.67,3,0.393,4,0.339,5,0.339,7,0.618,8,0.036,9,0.867,12,0.393,13,0.054,16,0.026,17,0.026,18,1.869,20,1.533,21,1.533,22,1.884,23,1.884,24,1.533,25,2.487,26,1.884,31,3.273,32,2.504,33,2.487,34,1.884,35,1.695,37,2.778,90,2.778,402,3.12,427,2.769,428,2.778,449,2.778,450,3.357,451,2.778,452,3.357,453,3.357,454,3.357,455,3.357]],["title/injectables/PostService.html",[44,1.155,427,1.547]],["body/injectables/PostService.html",[3,0.391,4,0.338,5,0.338,7,0.517,8,0.036,9,0.863,12,0.391,13,0.054,14,1.876,15,1.526,16,0.026,17,0.026,44,1.665,45,1.876,47,0.57,48,2.017,50,1.034,52,1.526,54,1.526,60,2.499,67,2.231,68,2.017,69,1.034,70,1.665,97,2.386,98,2.766,99,2.182,102,1.831,112,2.766,115,2.386,118,2.386,374,1.876,427,2.231,456,2.766,457,4.418,458,3.342,459,3.342,460,3.342,461,2.766,462,3.342,463,2.766,464,3.342,465,3.342,466,3.342,467,3.342,468,3.342]],["title/classes/UpdateUserDto.html",[13,0.05,469,1.928]],["body/classes/UpdateUserDto.html",[3,0.486,4,0.419,5,0.419,7,0.594,8,0.035,12,0.486,13,0.067,16,0.03,17,0.03,125,1.564,266,2.611,325,2.33,327,2.963,393,4.196,398,3.435,469,3.19,470,3.435,471,5.071,472,3.435,473,3.435,474,3.435]],["title/injectables/UserService.html",[44,1.155,99,1.27]],["body/injectables/UserService.html",[3,0.251,4,0.216,5,0.216,7,0.454,8,0.036,9,0.552,12,0.251,13,0.035,15,0.977,16,0.019,17,0.019,44,1.214,45,1.201,47,0.365,48,1.471,50,0.907,52,1.769,53,1.334,54,1.471,60,2.453,67,2.335,68,1.968,69,0.907,70,1.46,71,2.766,73,1.968,80,1.77,88,1.346,97,2.299,99,1.334,102,2.276,104,1.769,110,1.346,111,1.77,114,1.77,118,1.527,162,1.626,197,2.909,372,2.595,374,2.727,461,1.77,463,3.206,475,1.77,476,3.221,477,3.221,478,3.221,479,4.476,480,3.221,481,3.221,482,2.139,483,2.139,484,2.139,485,2.139,486,3.567,487,3.221,488,2.665,489,3.221,490,2.139,491,3.206,492,2.139,493,2.665,494,3.221,495,3.221,496,3.221,497,3.221,498,1.77,499,1.77,500,2.139,501,2.139,502,2.139,503,3.221,504,3.221,505,2.139,506,2.139,507,2.139,508,2.139,509,2.139,510,2.139]],["title/controllers/UsersController.html",[0,1.27,511,1.928]],["body/controllers/UsersController.html",[2,0.786,3,0.244,4,0.211,5,0.211,7,0.564,8,0.035,9,0.539,12,0.244,13,0.034,14,1.171,15,0.953,16,0.019,17,0.019,47,0.356,48,1.443,50,0.893,52,1.743,53,1.31,54,2.283,58,1.49,60,2.662,64,1.309,67,1.927,68,1.743,69,1.071,70,1.438,76,1.49,77,0.953,99,0.865,102,2.134,104,1.443,115,1.49,121,1.727,161,2.616,162,1.927,166,1.989,176,1.775,197,2.401,266,1.989,305,2.257,325,2.39,372,2.39,374,2.142,418,1.727,422,1.727,426,3.158,430,1.727,431,1.727,432,1.727,469,2.678,474,2.616,479,1.727,491,3.158,493,1.727,498,1.727,499,1.727,511,1.989,512,1.727,513,3.161,514,3.161,515,3.161,516,2.087,517,2.087,518,2.087,519,2.087,520,3.161,521,3.161,522,2.087,523,2.087,524,2.087,525,2.087,526,3.161,527,2.087,528,2.087,529,3.161,530,4.257,531,2.087,532,2.087,533,2.087,534,2.087,535,2.087,536,2.087,537,2.087,538,1.727,539,2.087,540,2.087,541,2.087,542,2.087,543,2.087,544,2.087,545,2.087,546,2.087,547,2.087,548,2.087,549,2.087,550,2.087,551,2.087,552,2.087,553,2.087,554,2.087,555,2.087,556,3.161,557,3.161,558,2.087,559,2.087,560,2.087]],["title/modules/UsersModule.html",[18,1.155,32,1.399]],["body/modules/UsersModule.html",[2,1.66,3,0.39,4,0.336,5,0.336,7,0.616,8,0.036,9,0.859,12,0.39,13,0.054,16,0.026,17,0.026,18,1.861,20,1.52,21,1.52,22,1.868,23,1.868,24,1.52,25,2.473,26,2.473,30,1.68,32,2.617,33,2.473,34,1.868,35,1.68,88,2.093,99,2.464,511,3.107,538,2.754,561,2.754,562,2.754,563,2.754,564,3.328,565,3.328,566,3.328,567,3.328,568,3.328,569,3.328]],["title/coverage.html",[570,2.976]],["body/coverage.html",[0,2.02,1,1.747,5,0.281,6,2.298,8,0.036,10,1.402,13,0.09,16,0.023,17,0.023,24,1.268,41,1.559,44,1.837,46,2.298,57,2.298,63,1.747,69,0.65,73,1.268,94,2.298,99,1.151,124,1.747,126,2.781,127,2.298,149,1.559,150,2.781,316,2.298,325,1.559,326,2.298,327,2.781,366,1.747,367,2.298,372,1.559,373,2.298,374,1.559,375,2.298,384,2.298,391,1.747,392,2.298,402,1.747,403,2.298,410,2.298,427,1.402,456,2.298,469,1.747,470,2.298,475,2.298,511,1.747,512,2.298,570,1.983,571,2.298,572,2.777,573,6.01,574,4.498,575,5.134,576,5.134,577,2.298,578,2.777,579,3.895,580,2.777,581,2.777,582,2.777,583,2.777,584,2.777]],["title/dependencies.html",[21,1.681,585,2.123]],["body/dependencies.html",[8,0.036,9,1.017,13,0.08,16,0.029,17,0.029,21,1.798,77,1.798,144,1.632,250,2.211,472,3.259,473,3.259,586,3.939,587,3.939,588,5.349,589,3.939,590,3.939,591,3.939,592,3.939,593,3.939,594,3.939,595,3.939,596,3.939,597,3.939,598,3.939,599,3.939,600,3.939]],["title/miscellaneous/enumerations.html",[601,1.614,602,3.047]],["body/miscellaneous/enumerations.html",[8,0.036,16,0.028,17,0.028,47,0.649,105,3.429,130,4.271,154,3.975,176,2.696,197,3.021,198,3.975,199,3.975,202,3.975,229,3.975,234,3.975,235,3.975,601,2.392,602,3.147,603,3.803,604,3.803,605,3.803,606,3.803]],["title/miscellaneous/functions.html",[601,1.614,607,3.047]],["body/miscellaneous/functions.html",[8,0.032,16,0.032,17,0.032,24,2.611,47,0.784,577,3.802,601,2.891,607,3.802,608,4.595]],["title/index.html",[47,0.438,486,2.123,609,2.566]],["body/index.html",[4,0.239,8,0.034,16,0.02,17,0.02,35,2.285,162,1.192,166,2.584,193,2.869,307,1.954,395,1.954,488,1.954,570,1.686,571,1.954,610,2.361,611,2.361,612,4.107,613,2.361,614,2.361,615,2.361,616,2.361,617,2.361,618,2.361,619,4.107,620,2.361,621,2.361,622,2.361,623,4.525,624,2.361,625,5.207,626,2.361,627,5.207,628,2.361,629,2.361,630,3.466,631,2.361,632,2.361,633,2.361,634,4.107,635,2.361,636,3.466,637,2.361,638,2.361,639,2.361,640,4.525,641,2.361,642,2.361,643,2.361,644,2.361,645,2.361,646,4.525,647,3.466,648,2.361,649,4.107,650,2.361,651,3.745,652,2.361,653,2.361,654,2.361,655,2.361,656,2.361,657,2.361,658,4.107,659,2.361,660,2.361,661,2.361,662,3.466,663,2.361,664,2.361,665,2.361,666,4.107,667,2.361,668,2.361,669,2.361,670,2.361,671,2.361,672,3.466,673,2.361,674,2.361,675,2.361,676,2.361,677,2.361,678,2.361,679,3.466,680,2.361,681,2.361,682,2.361,683,3.466,684,3.466,685,2.361,686,2.361,687,2.361,688,2.361,689,2.361,690,2.361,691,2.361,692,2.361,693,2.361,694,2.361,695,2.361,696,1.954,697,2.361,698,2.361,699,2.361,700,2.361,701,2.361,702,2.361,703,1.954]],["title/modules.html",[20,1.903]],["body/modules.html",[8,0.03,16,0.03,17,0.03,19,2.683,20,1.947,30,2.153,31,2.394,32,1.947,651,4.764,704,5.756,705,5.756,706,5.756]],["title/overview.html",[707,3.45]],["body/overview.html",[2,1.159,8,0.035,10,2.397,16,0.025,17,0.025,18,1.159,19,3.687,20,1.405,21,1.405,22,1.727,23,1.727,24,1.405,25,1.727,26,1.727,27,2.545,28,2.545,29,2.545,30,2.773,31,3.154,32,2.565,33,2.346,34,1.727,35,1.553,45,1.727,73,2.565,84,2.545,85,2.545,86,2.545,99,2.328,125,1.159,339,2.545,427,2.397,449,2.545,451,2.545,561,2.545,562,2.545,563,2.545,707,2.545,708,4.747]],["title/properties.html",[128,1.387,585,2.123]],["body/properties.html",[8,0.036,16,0.031,17,0.031,128,1.701,162,2.279,696,3.736,703,3.736,709,4.514,710,4.514,711,4.514]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":573,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":710,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":595,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":598,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":594,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["09",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1.1.25",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":525,"title":{},"body":{"controllers/UsersController.html":{}}}],["123",{"_index":528,"title":{},"body":{"controllers/UsersController.html":{}}}],["12345})@isoptional()@isint()@type(undefined",{"_index":377,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["2.0.5",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":422,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":412,"title":{},"body":{"controllers/PostController.html":{}}}],["2024",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["3/4",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":335,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["30t12:30:00z",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["30t12:30:00z'})@isiso8601()@isoptional",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["4",{"_index":708,"title":{},"body":{"overview.html":{}}}],["6kpkvst33dchq&s",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["6kpkvst33dchq&s'})@isurl()@isoptional",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["7.4.0",{"_index":593,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":600,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":339,"title":{},"body":{"classes/CreateUserDtO.html":{},"overview.html":{}}}],["9",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["9]+)*$/,{message:'slug",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ai",{"_index":308,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["amazing",{"_index":689,"title":{},"body":{"index.html":{}}}],["api",{"_index":556,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":430,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":408,"title":{},"body":{"controllers/PostController.html":{}}}],["apioperation({summary:\"creates",{"_index":439,"title":{},"body":{"controllers/PostController.html":{}}}],["apioperation({summary:\"fetches",{"_index":542,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation({summary:\"update",{"_index":445,"title":{},"body":{"controllers/PostController.html":{}}}],["apiproperty",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description:\"string",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({description:\"the",{"_index":400,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apiproperty({description:\"title",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum:posttype,description:\"post",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum:status,description:\"provide",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({required",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":379,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({description",{"_index":376,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["apipropertyoptional({description:\"get",{"_index":382,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["apiquery",{"_index":539,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiquery({name:\"limit\",type:\"number\",required:false,example:12,description:\"number",{"_index":544,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiquery({name:\"page\",type:\"number\",required:false,example:123,description:\"number",{"_index":545,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":431,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apiresponse({status:200,description:\"userfetched",{"_index":543,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse({status:200,description:\"you",{"_index":446,"title":{},"body":{"controllers/PostController.html":{}}}],["apiresponse({status:201,description:\"you",{"_index":440,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["apitags(\"post",{"_index":435,"title":{},"body":{"controllers/PostController.html":{}}}],["apitags('auth",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":541,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":662,"title":{},"body":{"index.html":{}}}],["applications",{"_index":618,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":134,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{}}}],["array'})@isstring({each",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["array'})@validatenested({each",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["arrayminsize",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["arrayminsize(1",{"_index":324,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["arraynotempty",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["associated",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["atleast",{"_index":345,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["auth",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.controller",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.module",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":41,"title":{"controllers/AuthController.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":489,"title":{},"body":{"injectables/UserService.html":{}}}],["authenticated=this.authservice.isauth(userid",{"_index":508,"title":{},"body":{"injectables/UserService.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":696,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":73,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice:authservice",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":690,"title":{},"body":{"index.html":{}}}],["base",{"_index":521,"title":{},"body":{"controllers/UsersController.html":{}}}],["board",{"_index":682,"title":{},"body":{"index.html":{}}}],["body",{"_index":535,"title":{},"body":{"controllers/UsersController.html":{}}}],["boolean",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":706,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":704,"title":{},"body":{"modules.html":{}}}],["building",{"_index":613,"title":{},"body":{"index.html":{}}}],["casse",{"_index":347,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["channel",{"_index":653,"title":{},"body":{"index.html":{}}}],["character",{"_index":332,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["characters",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["check",{"_index":640,"title":{},"body":{"index.html":{}}}],["chracter",{"_index":362,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["chracter'})@matches(/^(?=.*[a",{"_index":340,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["class",{"_index":13,"title":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":125,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postmodule",{"_index":449,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_postmodule_imports",{"_index":450,"title":{},"body":{"modules/PostModule.html":{}}}],["cluster_postmodule_providers",{"_index":451,"title":{},"body":{"modules/PostModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":561,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":562,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":563,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":643,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["console.log(createpostdto",{"_index":444,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log(createuserdto,\"body",{"_index":555,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(email,password,id",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{}}}],["console.log(patchpostdto",{"_index":448,"title":{},"body":{"controllers/PostController.html":{}}}],["console.log(updateuserdto,\"body",{"_index":560,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(user,\"user",{"_index":466,"title":{},"body":{"injectables/PostService.html":{}}}],["console.log(userid,\"userid",{"_index":509,"title":{},"body":{"injectables/UserService.html":{}}}],["const",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":482,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["constructor(userservice",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["contain",{"_index":139,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["content",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["content?:string",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('post",{"_index":434,"title":{},"body":{"controllers/PostController.html":{}}}],["controller('users",{"_index":540,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller,get,post,param,query",{"_index":534,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["controllers:[authcontroller",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{}}}],["courses",{"_index":660,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":570,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["created",{"_index":441,"title":{},"body":{"controllers/PostController.html":{}}}],["created'})@post",{"_index":414,"title":{},"body":{"controllers/PostController.html":{}}}],["createmetaoptiondto",{"_index":124,"title":{"classes/CreateMetaOptionDto.html":{}},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["createpost",{"_index":404,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(@body",{"_index":442,"title":{},"body":{"controllers/PostController.html":{}}}],["createpost(createpostdto",{"_index":407,"title":{},"body":{"controllers/PostController.html":{}}}],["createpostdto",{"_index":149,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["createpostdto:createpostdto",{"_index":443,"title":{},"body":{"controllers/PostController.html":{}}}],["creates",{"_index":409,"title":{},"body":{"controllers/PostController.html":{}}}],["createuserdto",{"_index":325,"title":{"classes/CreateUserDtO.html":{}},"body":{"classes/CreateUserDtO.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createuserdto:createuserdto",{"_index":554,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers",{"_index":513,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":553,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":516,"title":{},"body":{"controllers/UsersController.html":{}}}],["date",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":655,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe(10),parseintpipe",{"_index":549,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["description:\"any",{"_index":319,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["description:\"key",{"_index":315,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["development",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["devtools",{"_index":667,"title":{},"body":{"index.html":{}}}],["digit",{"_index":349,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["discord",{"_index":652,"title":{},"body":{"index.html":{}}}],["displayed",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dive",{"_index":654,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":571,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dtos/create",{"_index":432,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":498,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["dtos/getpostparams,dto",{"_index":429,"title":{},"body":{"controllers/PostController.html":{}}}],["dtos/login.auth.dto",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{}}}],["dtos/patch",{"_index":433,"title":{},"body":{"controllers/PostController.html":{}}}],["dtos/update",{"_index":537,"title":{},"body":{"controllers/UsersController.html":{}}}],["e",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["e2e",{"_index":637,"title":{},"body":{"index.html":{}}}],["each",{"_index":135,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{}}}],["efficient",{"_index":614,"title":{},"body":{"index.html":{}}}],["email",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{},"injectables/UserService.html":{}}}],["email:\"waqar@wa.com",{"_index":504,"title":{},"body":{"injectables/UserService.html":{}}}],["email:\"wiqir@wa.com",{"_index":506,"title":{},"body":{"injectables/UserService.html":{}}}],["email:string",{"_index":359,"title":{},"body":{"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{}}}],["empty",{"_index":323,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["empty'})@arrayminsize(1",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["empty'})@isemail",{"_index":328,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["empty'})@isstring()@minlength(8",{"_index":337,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["empty'})@isstring({message",{"_index":330,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["ensures",{"_index":309,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enterprise",{"_index":671,"title":{},"body":{"index.html":{}}}],["entries",{"_index":526,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enum\",example:\"page",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":602,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/posttype.enum",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/status.enum",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["etc",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["etc\",example:\"review",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["etc'})@isenum(status",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["example'})@isnotempty({message",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example:\"my",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example:\"sidebarenabled",{"_index":317,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example:true",{"_index":322,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exapmle",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exceed",{"_index":334,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["experience",{"_index":657,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["exports:[authservice",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["exports:[userservice",{"_index":568,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":393,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{}}}],["false",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["false,description",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["false,description:\"content",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["false,description:\"schema",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["false,description:\"url",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["feautredimageurl",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["feautredimageurl?:string",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["fetch",{"_index":495,"title":{},"body":{"injectables/UserService.html":{}}}],["fetches",{"_index":493,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["few",{"_index":641,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["findall",{"_index":457,"title":{},"body":{"injectables/PostService.html":{}}}],["findall(userid",{"_index":459,"title":{},"body":{"injectables/PostService.html":{}}}],["findall(userid:number",{"_index":464,"title":{},"body":{"injectables/PostService.html":{}}}],["findonebyid",{"_index":480,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(userid",{"_index":484,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(userid:number",{"_index":507,"title":{},"body":{"injectables/UserService.html":{}}}],["first",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["follow",{"_index":675,"title":{},"body":{"index.html":{}}}],["forexample",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["framework",{"_index":612,"title":{},"body":{"index.html":{}}}],["full",{"_index":670,"title":{},"body":{"index.html":{}}}],["function",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":607,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:email/:password/:id",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/:id",{"_index":418,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":519,"title":{},"body":{"controllers/UsersController.html":{}}}],["getallusers",{"_index":481,"title":{},"body":{"injectables/UserService.html":{}}}],["getallusers(getuserparamsdto",{"_index":490,"title":{},"body":{"injectables/UserService.html":{}}}],["getallusers(getuserparamsdto:getuserparamsdto,limit:number,page:number",{"_index":502,"title":{},"body":{"injectables/UserService.html":{}}}],["getauthtoken",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{}}}],["getauthtoken(@param",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["getauthtoken(param",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["gethello",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["getpostparamdto",{"_index":366,"title":{"classes/GetPostParamDto.html":{}},"body":{"classes/GetPostParamDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["getposts",{"_index":405,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(@param",{"_index":437,"title":{},"body":{"controllers/PostController.html":{}}}],["getposts(getpostparamdto",{"_index":417,"title":{},"body":{"controllers/PostController.html":{}}}],["getting",{"_index":486,"title":{"index.html":{}},"body":{"injectables/UserService.html":{}}}],["getuserparamsdto",{"_index":372,"title":{"classes/GetUserParamsDto.html":{}},"body":{"classes/GetUserParamsDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["getuserparamsdto:getuserparamsdto",{"_index":547,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":514,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(@param",{"_index":546,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamsdto",{"_index":518,"title":{},"body":{"controllers/UsersController.html":{}}}],["graph",{"_index":663,"title":{},"body":{"index.html":{}}}],["grow",{"_index":686,"title":{},"body":{"index.html":{}}}],["handles",{"_index":476,"title":{},"body":{"injectables/UserService.html":{}}}],["hands",{"_index":656,"title":{},"body":{"index.html":{}}}],["handy",{"_index":644,"title":{},"body":{"index.html":{}}}],["having",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["header",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["hello",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":668,"title":{},"body":{"index.html":{}}}],["here",{"_index":694,"title":{},"body":{"index.html":{}}}],["https://encrypted",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":700,"title":{},"body":{"index.html":{}}}],["id",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["id\",example:12345",{"_index":383,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["id:\"1\",title:\"title1\",text:\"text1\",userid:user.id",{"_index":467,"title":{},"body":{"injectables/PostService.html":{}}}],["id:\"2\",title:\"title2\",text:\"text2\",userid:user.id",{"_index":468,"title":{},"body":{"injectables/PostService.html":{}}}],["id:number",{"_index":390,"title":{},"body":{"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{}}}],["id:userid",{"_index":510,"title":{},"body":{"injectables/UserService.html":{}}}],["id?:number",{"_index":371,"title":{},"body":{"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{}}}],["identifier",{"_index":316,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{}}}],["imports:[forwardref",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["imports:[forwardref(()=>authmodule",{"_index":569,"title":{},"body":{"modules/UsersModule.html":{}}}],["imports:[usersmodule",{"_index":455,"title":{},"body":{"modules/PostModule.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["inject",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref(()=>authservice",{"_index":501,"title":{},"body":{"injectables/UserService.html":{}}}],["inject(forwardref(()=>userservice",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":44,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":45,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injecting",{"_index":462,"title":{},"body":{"injectables/PostService.html":{}}}],["installcompile",{"_index":626,"title":{},"body":{"index.html":{}}}],["instead",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":664,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["isauth(id",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["isauth(id:number",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":351,"title":{},"body":{"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{}}}],["isenum",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(status",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":380,"title":{},"body":{"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson({message:\"schema",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":142,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@isemail",{"_index":385,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["isnotempty()@isstring",{"_index":388,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["isnotempty()@type(undefined",{"_index":368,"title":{},"body":{"classes/GetPostParamDto.html":{},"classes/LoginAuthDto.html":{}}}],["isnotempty({message",{"_index":137,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreateUserDtO.html":{}}}],["isnotempty({message:\"email",{"_index":358,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["isnotempty({message:\"in",{"_index":146,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["isnotempty({message:\"name",{"_index":353,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["isnotempty({message:\"password",{"_index":360,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["isnotempty({message:\"please",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnumber",{"_index":381,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["isobject",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{}}}],["isstring",{"_index":143,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/LoginAuthDto.html":{}}}],["isstring({message",{"_index":131,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["isstring({message:\"content",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring({message:\"name",{"_index":354,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["isstring({message:\"schema",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring({message:\"slug",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring({message:\"title",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isurl",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["item",{"_index":310,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":679,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":681,"title":{},"body":{"index.html":{}}}],["join",{"_index":692,"title":{},"body":{"index.html":{}}}],["json",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["json\",example:\"{'key1':'hello",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":697,"title":{},"body":{"index.html":{}}}],["key",{"_index":129,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{}}}],["key1':'hello'}'})@isstring({message",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["key:string",{"_index":147,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["learn",{"_index":648,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letters",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":703,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":684,"title":{},"body":{"index.html":{}}}],["limit",{"_index":491,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["limit:number,@query('page',parseintpipe",{"_index":550,"title":{},"body":{"controllers/UsersController.html":{}}}],["linkedin",{"_index":677,"title":{},"body":{"index.html":{}}}],["list",{"_index":497,"title":{},"body":{"injectables/UserService.html":{}}}],["logged",{"_index":120,"title":{},"body":{"injectables/AuthService.html":{}}}],["login",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email:string,password:string,id:number",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginauthdto",{"_index":63,"title":{"classes/LoginAuthDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["long",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["looking",{"_index":678,"title":{},"body":{"index.html":{}}}],["loop",{"_index":673,"title":{},"body":{"index.html":{}}}],["matches",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["matches(/^(?=.*[a",{"_index":363,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["matches(/^[a",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maximum",{"_index":494,"title":{},"body":{"injectables/UserService.html":{}}}],["maxlength",{"_index":352,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["maxlength(30,{message:\"name",{"_index":356,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["means",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["message",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["message:\"in",{"_index":145,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["meta",{"_index":132,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{}}}],["metadata",{"_index":597,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metaoptions.dto",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metaoptions.dto.ts",{"_index":127,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"coverage.html":{}}}],["metaoptions.dto.ts:5",{"_index":140,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["metaoptions.dto.ts:7",{"_index":141,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["methods",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["min",{"_index":331,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["minimum",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["minlength(3",{"_index":311,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(3,{message:\"min",{"_index":355,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["minlength(4",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8,{message:\"paswword",{"_index":361,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["miscellaneous",{"_index":601,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":683,"title":{},"body":{"index.html":{}}}],["mode",{"_index":630,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":649,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":698,"title":{},"body":{"index.html":{}}}],["name",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDtO.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["name'})@maxlength(30",{"_index":333,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["name:\"waqar",{"_index":503,"title":{},"body":{"injectables/UserService.html":{}}}],["name:\"wiqi",{"_index":505,"title":{},"body":{"injectables/UserService.html":{}}}],["name:string",{"_index":357,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["need",{"_index":395,"title":{},"body":{"classes/PatchPostDto.html":{},"index.html":{}}}],["nest",{"_index":619,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":702,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":646,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":472,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreatePostDto.html":{},"classes/GetUserParamsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":410,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["node.js",{"_index":611,"title":{},"body":{"index.html":{}}}],["npm",{"_index":625,"title":{},"body":{"index.html":{}}}],["number",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["obj",{"_index":136,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["object",{"_index":138,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["offer",{"_index":680,"title":{},"body":{"index.html":{}}}],["official",{"_index":658,"title":{},"body":{"index.html":{}}}],["one",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["open",{"_index":685,"title":{},"body":{"index.html":{}}}],["operations",{"_index":477,"title":{},"body":{"injectables/UserService.html":{}}}],["option",{"_index":133,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{}}}],["optional",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":707,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":585,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["page'})@isnotempty({message",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["page:number",{"_index":551,"title":{},"body":{"controllers/UsersController.html":{}}}],["pages",{"_index":529,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination",{"_index":496,"title":{},"body":{"injectables/UserService.html":{}}}],["paragraph",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["param",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"injectables/UserService.html":{}}}],["param:loginauthdto",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto",{"_index":499,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["params.dto.ts",{"_index":375,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["params.dto.ts:9",{"_index":378,"title":{},"body":{"classes/GetUserParamsDto.html":{}}}],["parseintpipe,defaultvaluepipe,validationpipe",{"_index":536,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":669,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":398,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createpostdto",{"_index":394,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":471,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["password",{"_index":108,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{}}}],["password:string",{"_index":365,"title":{},"body":{"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{}}}],["paswword",{"_index":338,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["patch",{"_index":426,"title":{},"body":{"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":391,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"coverage.html":{}}}],["please",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["post\",example:\"https://encrypted",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@apiresponse({status",{"_index":411,"title":{},"body":{"controllers/PostController.html":{}}}],["post'})@isenum(posttype",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isnotempty({message",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring({message",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post,body",{"_index":425,"title":{},"body":{"controllers/PostController.html":{}}}],["post.controller",{"_index":453,"title":{},"body":{"modules/PostModule.html":{}}}],["post.dto",{"_index":399,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["post.dto.ts",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:12",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:17",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:23",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:28",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:33",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:39",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:44",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:49",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:60",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:88",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:9",{"_index":397,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post/post.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postcontroller",{"_index":402,"title":{"controllers/PostController.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"coverage.html":{}}}],["postmodule",{"_index":31,"title":{"modules/PostModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostModule.html":{},"modules.html":{},"overview.html":{}}}],["postservice",{"_index":427,"title":{"injectables/PostService.html":{}},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"coverage.html":{},"overview.html":{}}}],["postservice:postservice",{"_index":436,"title":{},"body":{"controllers/PostController.html":{}}}],["posttype",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype:posttype",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["prefix",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":632,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":610,"title":{},"body":{"index.html":{}}}],["project",{"_index":623,"title":{},"body":{"index.html":{}}}],["properties",{"_index":128,"title":{"properties.html":{}},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["provide",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/post.service",{"_index":428,"title":{},"body":{"controllers/PostController.html":{},"modules/PostModule.html":{}}}],["providers/user.services",{"_index":538,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["providers:[postservice",{"_index":454,"title":{},"body":{"modules/PostModule.html":{}}}],["providers:[userservice",{"_index":567,"title":{},"body":{"modules/UsersModule.html":{}}}],["public",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["published",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published\",example",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishedon",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["queries",{"_index":530,"title":{},"body":{"controllers/UsersController.html":{}}}],["queries'})@apiquery({name",{"_index":527,"title":{},"body":{"controllers/UsersController.html":{}}}],["queries'})@apiresponse({status",{"_index":522,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit',new",{"_index":548,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":650,"title":{},"body":{"index.html":{}}}],["read",{"_index":693,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["real",{"_index":665,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":596,"title":{},"body":{"dependencies.html":{}}}],["related",{"_index":478,"title":{},"body":{"injectables/UserService.html":{}}}],["repository",{"_index":622,"title":{},"body":{"index.html":{}}}],["request",{"_index":557,"title":{},"body":{"controllers/UsersController.html":{}}}],["required",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"controllers/UsersController.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":642,"title":{},"body":{"index.html":{}}}],["response",{"_index":413,"title":{},"body":{"controllers/PostController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["returns",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["review",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["review'})@isnotempty({message",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["run",{"_index":627,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":599,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":321,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":615,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["schema?:string",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sehduled",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["server",{"_index":616,"title":{},"body":{"index.html":{}}}],["service",{"_index":463,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["setup",{"_index":624,"title":{},"body":{"index.html":{}}}],["side",{"_index":617,"title":{},"body":{"index.html":{}}}],["single",{"_index":487,"title":{},"body":{"injectables/UserService.html":{}}}],["slug",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug:string",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"modules/PostModule.html":{},"injectables/PostService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["space",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["spaces",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":348,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["sponsors",{"_index":688,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":608,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../posttype.enum.ts",{"_index":603,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../status.enum.ts",{"_index":604,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":51,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:10",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":566,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/dtos/login.auth.dto.ts",{"_index":384,"title":{},"body":{"classes/LoginAuthDto.html":{},"coverage.html":{}}}],["src/auth/dtos/login.auth.dto.ts:11",{"_index":386,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["src/auth/dtos/login.auth.dto.ts:15",{"_index":389,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["src/auth/dtos/login.auth.dto.ts:7",{"_index":387,"title":{},"body":{"classes/LoginAuthDto.html":{}}}],["src/auth/providers/auth.service",{"_index":500,"title":{},"body":{"injectables/UserService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:11",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:16",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":577,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/post/dtos/create",{"_index":126,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"coverage.html":{}}}],["src/post/dtos/getpostparams,dto.ts",{"_index":367,"title":{},"body":{"classes/GetPostParamDto.html":{},"coverage.html":{}}}],["src/post/dtos/getpostparams,dto.ts:7",{"_index":369,"title":{},"body":{"classes/GetPostParamDto.html":{}}}],["src/post/dtos/patch",{"_index":392,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/post/enums/posttype.enum.ts",{"_index":605,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/enums/status.enum.ts",{"_index":606,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/post/post.controller.ts",{"_index":403,"title":{},"body":{"controllers/PostController.html":{},"coverage.html":{}}}],["src/post/post.controller.ts:13",{"_index":419,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:20",{"_index":415,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.controller.ts:28",{"_index":424,"title":{},"body":{"controllers/PostController.html":{}}}],["src/post/post.module.ts",{"_index":452,"title":{},"body":{"modules/PostModule.html":{}}}],["src/post/providers/post.service.ts",{"_index":456,"title":{},"body":{"injectables/PostService.html":{},"coverage.html":{}}}],["src/post/providers/post.service.ts:5",{"_index":458,"title":{},"body":{"injectables/PostService.html":{}}}],["src/post/providers/post.service.ts:8",{"_index":460,"title":{},"body":{"injectables/PostService.html":{}}}],["src/users/dtos/create",{"_index":326,"title":{},"body":{"classes/CreateUserDtO.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":373,"title":{},"body":{"classes/GetUserParamsDto.html":{},"coverage.html":{}}}],["src/users/dtos/update",{"_index":470,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.services",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{}}}],["src/users/providers/user.services.ts",{"_index":475,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/users/providers/user.services.ts:10",{"_index":483,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.services.ts:23",{"_index":492,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/providers/user.services.ts:36",{"_index":485,"title":{},"body":{"injectables/UserService.html":{}}}],["src/users/users.controller.ts",{"_index":512,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:18",{"_index":531,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:22",{"_index":517,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:27",{"_index":533,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostModule.html":{}}}],["src/users/users.module.ts",{"_index":564,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":628,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":631,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":633,"title":{},"body":{"index.html":{}}}],["started",{"_index":609,"title":{"index.html":{}},"body":{}}],["starter",{"_index":621,"title":{},"body":{"index.html":{}}}],["statements",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["status:status",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["status:true,id:id",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{}}}],["stay",{"_index":672,"title":{},"body":{"index.html":{}}}],["story",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["string",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/LoginAuthDto.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["string\",example:\"this",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@isoptional()@isjson({message",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@matches(/^[a",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["string'})@minlength(3",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{}}}],["string'})@minlength(4",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sucessfully",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["sucessfully'})@apiquery({name",{"_index":524,"title":{},"body":{"controllers/UsersController.html":{}}}],["support",{"_index":651,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":705,"title":{},"body":{"modules.html":{}}}],["table",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tbn0.gstatic.com/images?q=tbn:and9gctvik0ntt",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tech",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["test",{"_index":636,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":639,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":638,"title":{},"body":{"index.html":{}}}],["tests",{"_index":634,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":687,"title":{},"body":{"index.html":{}}}],["this.authservice.login(param.email,param.password,param.id",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.postservice.findall(getpostparamdto.id",{"_index":438,"title":{},"body":{"controllers/PostController.html":{}}}],["this.userservice.findonebyid(getuserparamsdto.id",{"_index":552,"title":{},"body":{"controllers/UsersController.html":{}}}],["time",{"_index":666,"title":{},"body":{"index.html":{}}}],["title",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["title:string",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["touch",{"_index":695,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"dependencies.html":{}}}],["true",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined)@arraynotempty({message",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":701,"title":{},"body":{"index.html":{}}}],["type",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostController.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["type(()=>number",{"_index":370,"title":{},"body":{"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{}}}],["type:\"string",{"_index":314,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type:'any",{"_index":318,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type:'array",{"_index":312,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type:'object",{"_index":313,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["types",{"_index":473,"title":{},"body":{"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":620,"title":{},"body":{"index.html":{}}}],["undefined})@isoptional()@isarray({message",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":635,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":711,"title":{},"body":{"properties.html":{}}}],["update",{"_index":421,"title":{},"body":{"controllers/PostController.html":{}}}],["updated",{"_index":401,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostController.html":{}}}],["updated'})@isnotempty()@isint",{"_index":396,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated'})@patch",{"_index":423,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost",{"_index":406,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(@body",{"_index":447,"title":{},"body":{"controllers/PostController.html":{}}}],["updatepost(patchpostdto",{"_index":420,"title":{},"body":{"controllers/PostController.html":{}}}],["updates",{"_index":674,"title":{},"body":{"index.html":{}}}],["updateuserdto",{"_index":469,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["updateuserdto:updateuserdto",{"_index":559,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateusers",{"_index":515,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateusers(@body",{"_index":558,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateusers(updateuserdto",{"_index":532,"title":{},"body":{"controllers/UsersController.html":{}}}],["upper",{"_index":346,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["url",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["used",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":374,"title":{},"body":{"classes/GetUserParamsDto.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["user.dto",{"_index":474,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":327,"title":{},"body":{"classes/CreateUserDtO.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":329,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["user.dto.ts:17",{"_index":350,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["user.dto.ts:7",{"_index":336,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["user=this.userservice.findonebyid(id",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{}}}],["user=this.userservice.findonebyid(userid",{"_index":465,"title":{},"body":{"injectables/PostService.html":{}}}],["userfetched",{"_index":523,"title":{},"body":{"controllers/UsersController.html":{}}}],["userid",{"_index":461,"title":{},"body":{"injectables/PostService.html":{},"injectables/UserService.html":{}}}],["useron",{"_index":520,"title":{},"body":{"controllers/UsersController.html":{}}}],["users",{"_index":479,"title":{},"body":{"injectables/UserService.html":{},"controllers/UsersController.html":{}}}],["users.controller",{"_index":565,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":511,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":99,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"injectables/UserService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userservice:userservice",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostService.html":{},"controllers/UsersController.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["uses",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":488,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["valid",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":144,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDtO.html":{},"classes/GetPostParamDto.html":{},"classes/GetUserParamsDto.html":{},"classes/LoginAuthDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":130,"title":{},"body":{"classes/CreateMetaOptionDto.html":{},"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["value:any",{"_index":148,"title":{},"body":{"classes/CreateMetaOptionDto.html":{}}}],["version",{"_index":709,"title":{},"body":{"properties.html":{}}}],["vhxrw8wgwhbzq",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["video",{"_index":659,"title":{},"body":{"index.html":{}}}],["visit",{"_index":647,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":661,"title":{},"body":{"index.html":{}}}],["void",{"_index":416,"title":{},"body":{"controllers/PostController.html":{}}}],["want",{"_index":320,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["watch",{"_index":629,"title":{},"body":{"index.html":{}}}],["website",{"_index":699,"title":{},"body":{"index.html":{}}}],["without",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["words",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["words\",example:\"this",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":645,"title":{},"body":{"index.html":{}}}],["world",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["writing",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["x",{"_index":676,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":691,"title":{},"body":{"index.html":{}}}],["z0",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d#$@!%&*?]{8,30",{"_index":344,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["z\\d#$@!%&*?]{8,30}$/,{message:\"password",{"_index":364,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["z])(?=.*[a",{"_index":341,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["z])(?=.*\\d)(?=.*[#$@!%&*?])[a",{"_index":342,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["za",{"_index":343,"title":{},"body":{"classes/CreateUserDtO.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostModule } from './post/post.module';\nimport { AuthController } from './auth/auth.controller';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                getAuthToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getAuthToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAuthToken(param: LoginAuthDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:email/:password/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                param\n                                            \n                                                            LoginAuthDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { LoginAuthDto } from './dtos/login.auth.dto';\nimport { ApiTags } from '@nestjs/swagger';\n@Controller('auth')\n@ApiTags('Auth')\nexport class AuthController {\n    constructor(private readonly authService:AuthService){}\n    @Get('/:email/:password/:id')\n    public getAuthToken(@Param() param:LoginAuthDto){\n        return this.authService.login(param.email,param.password,param.id)\n     }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers:[AuthController],\n  providers: [AuthService],\n  imports:[forwardRef(()=> UsersModule)],\n  exports:[AuthService]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { status: boolean; id: number; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { UserService } from 'src/users/providers/user.services';\n\n@Injectable()\nexport class AuthService {\n    constructor(\n        @Inject(forwardRef(()=>UserService))\n\n        private readonly userService:UserService\n    ){}\n    public login(email:string,password:string,id:number){\n        console.log(email,password,id)\n        const user=this.userService.findOneById(id)\n        return \"logged in sucessfully\"\n    }\n    public isAuth(id:number){\n        return {status:true,id:id}\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMetaOptionDto.html":{"url":"classes/CreateMetaOptionDto.html","title":"class - CreateMetaOptionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMetaOptionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-metaoptions.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({message: 'In meta option array , each obj key should be string '})@IsNotEmpty({message: 'In meta option array each object should contain key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-metaoptions.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'In meta option array each object should contain value across key'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-metaoptions.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from \"class-validator\";\nexport class CreateMetaOptionDto{\n    @IsString({ message:\"In meta option array , each obj key should be string \"})\n    @IsNotEmpty({message:\"In meta option array each object should contain key\"})\n    key:string;\n    @IsNotEmpty({message:\"In meta option array each object should contain value across key\"})\n    value:any;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                feautredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'content means writing/ words', example: 'this is a exapmle paragraph of content of post'})@IsString({message: 'content should of type string'})@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        feautredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'url of image which is to e displayed in this post', example: 'https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTvIk0nTT-VhxRW8wgWHbzQ-6KPKvSt33DcHQ&s'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreateMetaOptionDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, type: 'array', items: undefined})@IsOptional()@IsArray({message: 'Meta option should be an array'})@ValidateNested({each: true})@Type(undefined)@ArrayNotEmpty({message: 'Meta option array should not be empty'})@ArrayMinSize(1, {message: 'Meta option array must contain at least 1 option'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:88\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Post type should be string and is enum', example: 'page'})@IsNotEmpty({message: 'Please provide title of post'})@IsEnum(postType, {message: 'Post type should be one of 'post', 'page', 'story', 'series''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'Date on which post will be published', example: '2024-09-30T12:30:00Z'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'schema should be a valid json', example: '{'key1':'hello'}'})@IsString({message: 'schema should of type string'})@IsOptional()@IsJSON({message: 'schema should be a valid JSON'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'string having small letters and - should be used instead of space ', example: 'my-first-post'})@IsNotEmpty({message: 'Please provide slug of post'})@IsString({message: 'slug should of type string'})@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'slug should be small letters and uses only \"-\" without spaces forexample \"my-url\" '})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         status\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: status, description: 'provide status of post like draft, sehduled etc', example: 'review'})@IsNotEmpty({message: 'Please provide status of post like draft, sehduled etc'})@IsEnum(status, {message: 'Post type should be one of 'draft', 'scheduled', 'review', 'published''})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false, description: 'An array of tags associated with the post. Each tag should be a string and at least 3 characters long.', example: undefined})@IsOptional()@IsArray({message: 'Tags should be an array'})@IsString({each: true, message: 'Each tag should be a string'})@MinLength(3, {each: true, message: 'Each tag should be of minimum 3 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Title should of type string', example: 'this is example'})@IsNotEmpty({message: 'Please provide title of post'})@IsString({message: 'Title should of type string'})@MinLength(4)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/create-post.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { ArrayMinSize, ArrayNotEmpty, IsArray, IsDate, IsEnum, IsISO8601, IsJSON, IsNotEmpty, IsObject, IsOptional, IsString, IsUrl, Matches, MinLength, ValidateNested } from \"class-validator\";\nimport { postType } from \"../enums/postType.enum\";\nimport { status } from \"../enums/status.enum\";\nimport { CreateMetaOptionDto } from \"./create-metaoptions.dto\";\nimport { ApiProperty } from \"@nestjs/swagger\";\nexport class CreatePostDto{\n    @ApiProperty({description:\"Title should of type string\",example:\"this is example\"})\n    @IsNotEmpty({message:\"Please provide title of post\"})\n    @IsString({message:\"Title should of type string\"})\n    @MinLength(4)\n    title:string;\n\n    @ApiProperty({enum:postType,description:\"Post type should be string and is enum\",example:\"page\"})\n    @IsNotEmpty({message:\"Please provide title of post\"})\n    @IsEnum(postType, { message: \"Post type should be one of 'post', 'page', 'story', 'series'\" })\n    postType:postType;\n\n    @ApiProperty({description:\"string having small letters and - should be used instead of space \",example:\"my-first-post\"})\n    @IsNotEmpty({message:\"Please provide slug of post\"})\n    @IsString({message:\"slug should of type string\"})\n    @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/,{message:'slug should be small letters and uses only \"-\" without spaces forexample \"my-url\" '})\n    slug:string;\n\n    @ApiProperty({enum:status,description:\"provide status of post like draft, sehduled etc\",example:\"review\"})\n    @IsNotEmpty({message:\"Please provide status of post like draft, sehduled etc\"})\n    @IsEnum(status, { message: \"Post type should be one of 'draft', 'scheduled', 'review', 'published'\" })\n    status:status;\n\n    @ApiProperty({required: false,description:\"content means writing/ words\",example:\"this is a exapmle paragraph of content of post\"})\n    @IsString({message:\"content should of type string\"})\n    @IsOptional()\n    content?:string;\n\n    @ApiProperty({required: false,description:\"schema should be a valid json\",example:\"{'key1':'hello'}\"})\n    @IsString({message:\"schema should of type string\"})\n    @IsOptional()\n    @IsJSON({message:\"schema should be a valid JSON\"})\n    schema?:string;\n\n    @ApiProperty({required: false,description:\"url of image which is to e displayed in this post\",example:\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTvIk0nTT-VhxRW8wgWHbzQ-6KPKvSt33DcHQ&s\"})\n    @IsUrl()\n    @IsOptional()\n    feautredImageUrl?:string;\n\n    @ApiProperty({required: false,description: \"Date on which post will be published\",example: \"2024-09-30T12:30:00Z\"  })\n      @IsISO8601()\n      @IsOptional()\n      publishedOn?: Date;\n\n@ApiProperty({\n    required: false,\n    description: \"An array of tags associated with the post. Each tag should be a string and at least 3 characters long.\",\n    example: [\"tech\", \"development\", \"AI\"]  \n  })\n  @IsOptional()\n  @IsArray({ message: \"Tags should be an array\" })\n  @IsString({ each: true, message: \"Each tag should be a string\" })  // Ensures each item in the array is a string\n  @MinLength(3, { each: true, message: \"Each tag should be of minimum 3 characters\" })\n  tags?: string[];\n  \n  @ApiProperty({\n    required: false,\n    type:'array',\n    items:{\n      type:'object',\n      properties:{\n        key:{\n          type:\"string\",\n          description:\"key can be any string identifier for you meta option\",\n          example:\"sidebarEnabled\"\n        },\n        value:{\n          type:'any',\n          description:\"Any value you want to save to the key\",\n          example:true\n        }\n      }\n    },\n\n  })\n  @IsOptional()\n  @IsArray({ message: \"Meta option should be an array\" })\n  @ValidateNested({ each: true })\n  @Type(() => CreateMetaOptionDto)\n  @ArrayNotEmpty({ message: \"Meta option array should not be empty\" })\n  @ArrayMinSize(1, { message: \"Meta option array must contain at least 1 option\" })\n  metaOptions: CreateMetaOptionDto[];\n  \n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDtO.html":{"url":"classes/CreateUserDtO.html","title":"class - CreateUserDtO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDtO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'email can not empty'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Name should not be empty'})@IsString({message: 'name should be of type string'})@MinLength(3, {message: 'Min 3 character are required for name'})@MaxLength(30, {message: 'name can not exceed 30 characters'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty({message: 'Password should not be empty'})@IsString()@MinLength(8, {message: 'Paswword should be 8 chracter'})@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$@!%&*?])[A-Za-z\\d#$@!%&*?]{8,30}$/, {message: 'password should contain atleast one upper casse, one special character, one digit'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:17\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString ,IsEmail, MinLength, MaxLength, Matches} from \"class-validator\";\nexport class CreateUserDtO {\n    @IsNotEmpty({message:\"Name should not be empty\"})\n    @IsString({message:\"name should be of type string\"})\n    @MinLength(3,{message:\"Min 3 character are required for name\"})\n    @MaxLength(30,{message:\"name can not exceed 30 characters\"})\n    name:string;\n\n    @IsNotEmpty({message:\"email can not empty\"})\n    @IsEmail()\n    email:string;\n\n    @IsNotEmpty({message:\"Password should not be empty\"})\n    @IsString()\n    @MinLength(8,{message:\"Paswword should be 8 chracter\"})\n    @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[#$@!%&*?])[A-Za-z\\d#$@!%&*?]{8,30}$/,{message:\"password should contain atleast one upper casse, one special character, one digit\"})\n    password:string;\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetPostParamDto.html":{"url":"classes/GetPostParamDto.html","title":"class - GetPostParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetPostParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/getPostParams,dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/getPostParams,dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsNotEmpty, IsString } from \"class-validator\";\n\nexport class GetPostParamDto{\n    @IsNotEmpty()\n    @Type(()=>Number)\n    id?:number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUserParamsDto.html":{"url":"classes/GetUserParamsDto.html","title":"class - GetUserParamsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUserParamsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-user-params.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user by id', example: 12345})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-user-params.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiPropertyOptional } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {  IsInt, IsNumber, IsOptional } from \"class-validator\";\nexport class GetUserParamsDto{\n    @ApiPropertyOptional({description:\"Get user by id\",example:12345})\n    @IsOptional()\n    @IsInt()\n    @Type(()=>Number)\n    id?:number;\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginAuthDto.html":{"url":"classes/LoginAuthDto.html","title":"class - LoginAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/login.auth.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.auth.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.auth.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/login.auth.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEmail, IsNotEmpty, IsString } from \"class-validator\";\n\nexport class LoginAuthDto{\n    @IsNotEmpty()\n    @Type(()=>Number)\n    id:number\n\n    @IsNotEmpty()\n   @IsEmail()\n    email:string\n\n    @IsNotEmpty()\n    @IsString()\n    password:string\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'the id post which need to be updated'})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/post/dtos/patch-post.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto){\n    @ApiProperty({description:\"the id post which need to be updated\"})\n    @IsNotEmpty()\n    @IsInt()\n    id:number\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostController.html":{"url":"controllers/PostController.html","title":"controller - PostController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/post.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                post\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getposts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'creates a new post'})@ApiResponse({status: 201, description: 'you get a response of 201 if your post is created'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getposts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getposts(getPostParamDto: GetPostParamDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getPostParamDto\n                                            \n                                                            GetPostParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'update a post'})@ApiResponse({status: 200, description: 'you get a response of 200 if your post is updated'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/post/post.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post,Body, Patch } from '@nestjs/common';\nimport { PostService } from './providers/post.service';\nimport { GetPostParamDto } from './dtos/getPostParams,dto';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('post')\n@ApiTags(\"Post\")\nexport class PostController {\n   constructor(private readonly postService:PostService){}\n   @Get('/:id')\n   public getposts(@Param() getPostParamDto: GetPostParamDto){\n    return this.postService.findAll(getPostParamDto.id)\n   }\n\n   @ApiOperation({summary:\"creates a new post\"})\n   @ApiResponse({status:201,description:\"you get a response of 201 if your post is created\"})\n   @Post()\n   public createPost(@Body() createPostDto:CreatePostDto){\n      console.log(createPostDto)\n   }\n\n   \n   @ApiOperation({summary:\"update a post\"})\n   @ApiResponse({status:200,description:\"you get a response of 200 if your post is updated\"})\n   @Patch()\n   public updatePost(@Body() patchPostDto: PatchPostDto){\n      console.log(patchPostDto)\n   }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostModule.html":{"url":"modules/PostModule.html","title":"module - PostModule","body":"\n                   \n\n\n\n\n    Modules\n    PostModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostModule\n\n\n\ncluster_PostModule_imports\n\n\n\ncluster_PostModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostModule\n\nPostModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/post/post.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostController } from './post.controller';\nimport { PostService } from './providers/post.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostController],\n  providers:[PostService],\n  imports:[UsersModule]\n})\nexport class PostModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostService.html":{"url":"injectables/PostService.html","title":"injectable - PostService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/post/providers/post.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/post/providers/post.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/post/providers/post.service.ts:8\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { UserService } from \"src/users/providers/user.services\";\n\n@Injectable()\nexport class PostService{\n    // injecting user service\n    constructor(private readonly userService:UserService){}\n    public findAll(userId:number){\n     const user=this.userService.findOneById(userId)\n     console.log(user,\"user\")\n        return[\n            {id:\"1\",title:\"title1\",text:\"text1\",userId:user.id},\n            {id:\"2\",title:\"title2\",text:\"text2\",userId:user.id}\n        ]\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDtO)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from \"@nestjs/mapped-types\";\nimport { CreateUserDtO } from \"./create-user.dto\";\nexport class UpdateUserDto extends PartialType(CreateUserDtO){}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.services.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that handles operations related to Users.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findOneById\n                            \n                            \n                                    Public\n                                getAllUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.services.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(userId: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.services.ts:36\n                        \n                    \n\n\n            \n                \n                        getting single user by using user id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { name: string; email: string; id: number; authenticated: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllUsers(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.services.ts:23\n                        \n                    \n\n\n            \n                \n                        Fetches all users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nParameters for getting users.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nMaximum number of users to fetch.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nPage number for pagination.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                A list of users.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from \"@nestjs/common\";\nimport { GetUserParamsDto } from \"../dtos/get-user-params.dto\";\nimport { AuthService } from \"src/auth/providers/auth.service\";\n\n    /**\n     * Service that handles operations related to Users.\n     */\n\n@Injectable()\nexport class UserService{\n//\n    constructor(\n        @Inject(forwardRef(()=>AuthService))\n        private readonly authService:AuthService\n){}\n   /**\n     * Fetches all users.\n     * @param getUserParamsDto - Parameters for getting users.\n     * @param limit - Maximum number of users to fetch.\n     * @param page - Page number for pagination.\n     * @returns A list of users.\n     */\n    public getAllUsers(getUserParamsDto:GetUserParamsDto,limit:number,page:number){\n        return[\n            {name:\"waqar\",\n             email:\"waqar@wa.com\"\n            },\n            {name:\"wiqi\",\n                email:\"wiqir@wa.com\"\n            },\n        ]\n    }\n    /**\n     * getting single user by using user id\n     */\n    public findOneById(userId:number){\n        const authenticated=this.authService.isAuth(userId)\n        console.log(userId,\"userid in user service\")\n        return {name:\"waqar\",\n             email:\"waqar@wa.com\",\n             id:userId,\n             authenticated\n            }\n        \n    }\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                updateUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDtO: CreateUserDtO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDtO\n                                            \n                                                            CreateUserDtO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamsDto: GetUserParamsDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'fetches useron base of id and queries'})@ApiResponse({status: 200, description: 'userfetched sucessfully'})@ApiQuery({name: 'limit', type: 'number', required: false, example: 12, description: 'number of entries return for queries'})@ApiQuery({name: 'page', type: 'number', required: false, example: 123, description: 'number of pages return for queries'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamsDto\n                                            \n                                                            GetUserParamsDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateUsers(updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller,Get,Post,Param,Query, Body ,ParseIntPipe,DefaultValuePipe,ValidationPipe, Patch} from '@nestjs/common';\nimport { CreateUserDtO } from './dtos/create-user.dto';\nimport { GetUserParamsDto} from './dtos/get-user-params.dto';\nimport { UpdateUserDto } from './dtos/update-user.dto';\nimport { UserService } from './providers/user.services';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n\n    constructor(private readonly userService:UserService){}\n    @Get('/:id?')\n    @ApiOperation({summary:\"fetches useron base of id and queries\"})\n    @ApiResponse({status:200,description:\"userfetched sucessfully\"})\n    @ApiQuery({name:\"limit\",type:\"number\",required:false,example:12,description:\"number of entries return for queries\"})\n    @ApiQuery({name:\"page\",type:\"number\",required:false,example:123,description:\"number of pages return for queries\"})\n    public getUsers(@Param() getUserParamsDto:GetUserParamsDto, @Query('limit',new DefaultValuePipe(10),ParseIntPipe) limit:number,@Query('page',ParseIntPipe) page:number){\n        return this.userService.findOneById(getUserParamsDto.id)\n    }\n    @Post()\n    public createUsers(@Body() createUserDtO:CreateUserDtO){\n        console.log(createUserDtO,\"body\")\n        return \"create user api was request\"\n    }\n    @Patch()\n    public updateUsers(@Body() updateUserDto:UpdateUserDto){\n        console.log(updateUserDto,\"body\")\n        return \"create user api was request\"\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UserService } from './providers/user.services';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers:[UserService],\n  exports:[UserService],\n  imports:[forwardRef(()=>AuthModule)]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dtos/login.auth.dto.ts\n            \n            class\n            LoginAuthDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/post/dtos/create-metaoptions.dto.ts\n            \n            class\n            CreateMetaOptionDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/post/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/post/dtos/getPostParams,dto.ts\n            \n            class\n            GetPostParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/post/post.controller.ts\n            \n            controller\n            PostController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/post/providers/post.service.ts\n            \n            injectable\n            PostService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDtO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/get-user-params.dto.ts\n            \n            class\n            GetUserParamsDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.services.ts\n            \n            injectable\n            UserService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                        \n                            status   (src/.../status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/post/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n    src/post/enums/status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        status\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostModule\n\n\n\ncluster_PostModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostModule\n\nPostModule\n\nAppModule -->\n\nPostModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostModule -->\n\nUsersModule->PostModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostService\n\nPostService\n\nPostModule -->\n\nPostService->PostModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
